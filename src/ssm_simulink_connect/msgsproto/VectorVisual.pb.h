// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VectorVisual.proto

#ifndef PROTOBUF_INCLUDED_VectorVisual_2eproto
#define PROTOBUF_INCLUDED_VectorVisual_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_VectorVisual_2eproto 

namespace protobuf_VectorVisual_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_VectorVisual_2eproto
namespace ssm_msgs {
namespace msgs {
class VectorVisual;
class VectorVisualDefaultTypeInternal;
extern VectorVisualDefaultTypeInternal _VectorVisual_default_instance_;
}  // namespace msgs
}  // namespace ssm_msgs
namespace google {
namespace protobuf {
template<> ::ssm_msgs::msgs::VectorVisual* Arena::CreateMaybeMessage<::ssm_msgs::msgs::VectorVisual>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ssm_msgs {
namespace msgs {

// ===================================================================

class VectorVisual : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssm_msgs.msgs.VectorVisual) */ {
 public:
  VectorVisual();
  virtual ~VectorVisual();

  VectorVisual(const VectorVisual& from);

  inline VectorVisual& operator=(const VectorVisual& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VectorVisual(VectorVisual&& from) noexcept
    : VectorVisual() {
    *this = ::std::move(from);
  }

  inline VectorVisual& operator=(VectorVisual&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorVisual& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorVisual* internal_default_instance() {
    return reinterpret_cast<const VectorVisual*>(
               &_VectorVisual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VectorVisual* other);
  friend void swap(VectorVisual& a, VectorVisual& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VectorVisual* New() const final {
    return CreateMaybeMessage<VectorVisual>(NULL);
  }

  VectorVisual* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VectorVisual>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VectorVisual& from);
  void MergeFrom(const VectorVisual& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorVisual* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Vector3d center = 1;
  bool has_center() const;
  void clear_center();
  static const int kCenterFieldNumber = 1;
  private:
  const ::gazebo::msgs::Vector3d& _internal_center() const;
  public:
  const ::gazebo::msgs::Vector3d& center() const;
  ::gazebo::msgs::Vector3d* release_center();
  ::gazebo::msgs::Vector3d* mutable_center();
  void set_allocated_center(::gazebo::msgs::Vector3d* center);

  // required .gazebo.msgs.Vector3d vector = 2;
  bool has_vector() const;
  void clear_vector();
  static const int kVectorFieldNumber = 2;
  private:
  const ::gazebo::msgs::Vector3d& _internal_vector() const;
  public:
  const ::gazebo::msgs::Vector3d& vector() const;
  ::gazebo::msgs::Vector3d* release_vector();
  ::gazebo::msgs::Vector3d* mutable_vector();
  void set_allocated_vector(::gazebo::msgs::Vector3d* vector);

  // @@protoc_insertion_point(class_scope:ssm_msgs.msgs.VectorVisual)
 private:
  void set_has_center();
  void clear_has_center();
  void set_has_vector();
  void clear_has_vector();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::gazebo::msgs::Vector3d* center_;
  ::gazebo::msgs::Vector3d* vector_;
  friend struct ::protobuf_VectorVisual_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VectorVisual

// required .gazebo.msgs.Vector3d center = 1;
inline bool VectorVisual::has_center() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorVisual::set_has_center() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorVisual::clear_has_center() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::gazebo::msgs::Vector3d& VectorVisual::_internal_center() const {
  return *center_;
}
inline const ::gazebo::msgs::Vector3d& VectorVisual::center() const {
  const ::gazebo::msgs::Vector3d* p = center_;
  // @@protoc_insertion_point(field_get:ssm_msgs.msgs.VectorVisual.center)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* VectorVisual::release_center() {
  // @@protoc_insertion_point(field_release:ssm_msgs.msgs.VectorVisual.center)
  clear_has_center();
  ::gazebo::msgs::Vector3d* temp = center_;
  center_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* VectorVisual::mutable_center() {
  set_has_center();
  if (center_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    center_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssm_msgs.msgs.VectorVisual.center)
  return center_;
}
inline void VectorVisual::set_allocated_center(::gazebo::msgs::Vector3d* center) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(center_);
  }
  if (center) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      center = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    set_has_center();
  } else {
    clear_has_center();
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:ssm_msgs.msgs.VectorVisual.center)
}

// required .gazebo.msgs.Vector3d vector = 2;
inline bool VectorVisual::has_vector() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorVisual::set_has_vector() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorVisual::clear_has_vector() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gazebo::msgs::Vector3d& VectorVisual::_internal_vector() const {
  return *vector_;
}
inline const ::gazebo::msgs::Vector3d& VectorVisual::vector() const {
  const ::gazebo::msgs::Vector3d* p = vector_;
  // @@protoc_insertion_point(field_get:ssm_msgs.msgs.VectorVisual.vector)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* VectorVisual::release_vector() {
  // @@protoc_insertion_point(field_release:ssm_msgs.msgs.VectorVisual.vector)
  clear_has_vector();
  ::gazebo::msgs::Vector3d* temp = vector_;
  vector_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* VectorVisual::mutable_vector() {
  set_has_vector();
  if (vector_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    vector_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssm_msgs.msgs.VectorVisual.vector)
  return vector_;
}
inline void VectorVisual::set_allocated_vector(::gazebo::msgs::Vector3d* vector) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vector_);
  }
  if (vector) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vector = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    set_has_vector();
  } else {
    clear_has_vector();
  }
  vector_ = vector;
  // @@protoc_insertion_point(field_set_allocated:ssm_msgs.msgs.VectorVisual.vector)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ssm_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_VectorVisual_2eproto
