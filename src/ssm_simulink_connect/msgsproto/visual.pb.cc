// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: visual.proto

#include "visual.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_geometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_geometry_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_Geometry;
}  // namespace protobuf_geometry_2eproto
namespace protobuf_material_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_material_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Material;
}  // namespace protobuf_material_2eproto
namespace protobuf_plugin_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_plugin_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Plugin;
}  // namespace protobuf_plugin_2eproto
namespace protobuf_pose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pose_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose;
}  // namespace protobuf_pose_2eproto
namespace protobuf_vector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vector3d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3d;
}  // namespace protobuf_vector3d_2eproto
namespace protobuf_visual_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_visual_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Visual_Meta;
}  // namespace protobuf_visual_2eproto
namespace gazebo {
namespace msgs {
class Visual_MetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Visual_Meta>
      _instance;
} _Visual_Meta_default_instance_;
class VisualDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Visual>
      _instance;
} _Visual_default_instance_;
}  // namespace msgs
}  // namespace gazebo
namespace protobuf_visual_2eproto {
static void InitDefaultsVisual_Meta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Visual_Meta_default_instance_;
    new (ptr) ::gazebo::msgs::Visual_Meta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Visual_Meta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Visual_Meta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVisual_Meta}, {}};

static void InitDefaultsVisual() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Visual_default_instance_;
    new (ptr) ::gazebo::msgs::Visual();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Visual::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_Visual =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsVisual}, {
      &protobuf_pose_2eproto::scc_info_Pose.base,
      &protobuf_geometry_2eproto::scc_info_Geometry.base,
      &protobuf_material_2eproto::scc_info_Material.base,
      &protobuf_plugin_2eproto::scc_info_Plugin.base,
      &protobuf_vector3d_2eproto::scc_info_Vector3d.base,
      &protobuf_visual_2eproto::scc_info_Visual_Meta.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Visual_Meta.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Visual.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual_Meta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual_Meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual_Meta, layer_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, parent_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, cast_shadows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, transparency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, laser_retro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, geometry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, material_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, delete_me_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, is_static_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, plugin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Visual, type_),
  0,
  7,
  1,
  8,
  11,
  9,
  10,
  2,
  3,
  4,
  12,
  13,
  14,
  ~0u,
  5,
  6,
  15,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::gazebo::msgs::Visual_Meta)},
  { 7, 29, sizeof(::gazebo::msgs::Visual)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_Visual_Meta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_Visual_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "visual.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014visual.proto\022\013gazebo.msgs\032\npose.proto\032"
      "\016geometry.proto\032\016material.proto\032\014plugin."
      "proto\032\016vector3d.proto\"\315\004\n\006Visual\022\014\n\004name"
      "\030\001 \002(\t\022\n\n\002id\030\002 \001(\r\022\023\n\013parent_name\030\003 \002(\t\022"
      "\021\n\tparent_id\030\004 \001(\r\022\024\n\014cast_shadows\030\005 \001(\010"
      "\022\024\n\014transparency\030\006 \001(\001\022\023\n\013laser_retro\030\007 "
      "\001(\001\022\037\n\004pose\030\010 \001(\0132\021.gazebo.msgs.Pose\022\'\n\010"
      "geometry\030\t \001(\0132\025.gazebo.msgs.Geometry\022\'\n"
      "\010material\030\n \001(\0132\025.gazebo.msgs.Material\022\017"
      "\n\007visible\030\013 \001(\010\022\021\n\tdelete_me\030\014 \001(\010\022\021\n\tis"
      "_static\030\r \001(\010\022#\n\006plugin\030\016 \003(\0132\023.gazebo.m"
      "sgs.Plugin\022$\n\005scale\030\017 \001(\0132\025.gazebo.msgs."
      "Vector3d\022&\n\004meta\030\020 \001(\0132\030.gazebo.msgs.Vis"
      "ual.Meta\022&\n\004type\030\021 \001(\0162\030.gazebo.msgs.Vis"
      "ual.Type\032\025\n\004Meta\022\r\n\005layer\030\001 \001(\005\"d\n\004Type\022"
      "\n\n\006ENTITY\020\000\022\t\n\005MODEL\020\001\022\010\n\004LINK\020\002\022\n\n\006VISU"
      "AL\020\003\022\r\n\tCOLLISION\020\004\022\n\n\006SENSOR\020\005\022\007\n\003GUI\020\006"
      "\022\013\n\007PHYSICS\020\007"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 693);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "visual.proto", &protobuf_RegisterTypes);
  ::protobuf_pose_2eproto::AddDescriptors();
  ::protobuf_geometry_2eproto::AddDescriptors();
  ::protobuf_material_2eproto::AddDescriptors();
  ::protobuf_plugin_2eproto::AddDescriptors();
  ::protobuf_vector3d_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_visual_2eproto
namespace gazebo {
namespace msgs {
const ::google::protobuf::EnumDescriptor* Visual_Type_descriptor() {
  protobuf_visual_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_visual_2eproto::file_level_enum_descriptors[0];
}
bool Visual_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Visual_Type Visual::ENTITY;
const Visual_Type Visual::MODEL;
const Visual_Type Visual::LINK;
const Visual_Type Visual::VISUAL;
const Visual_Type Visual::COLLISION;
const Visual_Type Visual::SENSOR;
const Visual_Type Visual::GUI;
const Visual_Type Visual::PHYSICS;
const Visual_Type Visual::Type_MIN;
const Visual_Type Visual::Type_MAX;
const int Visual::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Visual_Meta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Visual_Meta::kLayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Visual_Meta::Visual_Meta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_visual_2eproto::scc_info_Visual_Meta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Visual.Meta)
}
Visual_Meta::Visual_Meta(const Visual_Meta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layer_ = from.layer_;
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Visual.Meta)
}

void Visual_Meta::SharedCtor() {
  layer_ = 0;
}

Visual_Meta::~Visual_Meta() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Visual.Meta)
  SharedDtor();
}

void Visual_Meta::SharedDtor() {
}

void Visual_Meta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Visual_Meta::descriptor() {
  ::protobuf_visual_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_visual_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Visual_Meta& Visual_Meta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_visual_2eproto::scc_info_Visual_Meta.base);
  return *internal_default_instance();
}


void Visual_Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Visual.Meta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Visual_Meta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Visual.Meta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 layer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_layer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Visual.Meta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Visual.Meta)
  return false;
#undef DO_
}

void Visual_Meta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Visual.Meta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 layer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Visual.Meta)
}

::google::protobuf::uint8* Visual_Meta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Visual.Meta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 layer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Visual.Meta)
  return target;
}

size_t Visual_Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Visual.Meta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 layer = 1;
  if (has_layer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->layer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Visual_Meta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Visual.Meta)
  GOOGLE_DCHECK_NE(&from, this);
  const Visual_Meta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Visual_Meta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Visual.Meta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Visual.Meta)
    MergeFrom(*source);
  }
}

void Visual_Meta::MergeFrom(const Visual_Meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Visual.Meta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_layer()) {
    set_layer(from.layer());
  }
}

void Visual_Meta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Visual.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visual_Meta::CopyFrom(const Visual_Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Visual.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visual_Meta::IsInitialized() const {
  return true;
}

void Visual_Meta::Swap(Visual_Meta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Visual_Meta::InternalSwap(Visual_Meta* other) {
  using std::swap;
  swap(layer_, other->layer_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Visual_Meta::GetMetadata() const {
  protobuf_visual_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_visual_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Visual::InitAsDefaultInstance() {
  ::gazebo::msgs::_Visual_default_instance_._instance.get_mutable()->pose_ = const_cast< ::gazebo::msgs::Pose*>(
      ::gazebo::msgs::Pose::internal_default_instance());
  ::gazebo::msgs::_Visual_default_instance_._instance.get_mutable()->geometry_ = const_cast< ::gazebo::msgs::Geometry*>(
      ::gazebo::msgs::Geometry::internal_default_instance());
  ::gazebo::msgs::_Visual_default_instance_._instance.get_mutable()->material_ = const_cast< ::gazebo::msgs::Material*>(
      ::gazebo::msgs::Material::internal_default_instance());
  ::gazebo::msgs::_Visual_default_instance_._instance.get_mutable()->scale_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::gazebo::msgs::_Visual_default_instance_._instance.get_mutable()->meta_ = const_cast< ::gazebo::msgs::Visual_Meta*>(
      ::gazebo::msgs::Visual_Meta::internal_default_instance());
}
void Visual::clear_pose() {
  if (pose_ != NULL) pose_->Clear();
  clear_has_pose();
}
void Visual::clear_geometry() {
  if (geometry_ != NULL) geometry_->Clear();
  clear_has_geometry();
}
void Visual::clear_material() {
  if (material_ != NULL) material_->Clear();
  clear_has_material();
}
void Visual::clear_plugin() {
  plugin_.Clear();
}
void Visual::clear_scale() {
  if (scale_ != NULL) scale_->Clear();
  clear_has_scale();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Visual::kNameFieldNumber;
const int Visual::kIdFieldNumber;
const int Visual::kParentNameFieldNumber;
const int Visual::kParentIdFieldNumber;
const int Visual::kCastShadowsFieldNumber;
const int Visual::kTransparencyFieldNumber;
const int Visual::kLaserRetroFieldNumber;
const int Visual::kPoseFieldNumber;
const int Visual::kGeometryFieldNumber;
const int Visual::kMaterialFieldNumber;
const int Visual::kVisibleFieldNumber;
const int Visual::kDeleteMeFieldNumber;
const int Visual::kIsStaticFieldNumber;
const int Visual::kPluginFieldNumber;
const int Visual::kScaleFieldNumber;
const int Visual::kMetaFieldNumber;
const int Visual::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Visual::Visual()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_visual_2eproto::scc_info_Visual.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Visual)
}
Visual::Visual(const Visual& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      plugin_(from.plugin_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  parent_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_name()) {
    parent_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_name_);
  }
  if (from.has_pose()) {
    pose_ = new ::gazebo::msgs::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_geometry()) {
    geometry_ = new ::gazebo::msgs::Geometry(*from.geometry_);
  } else {
    geometry_ = NULL;
  }
  if (from.has_material()) {
    material_ = new ::gazebo::msgs::Material(*from.material_);
  } else {
    material_ = NULL;
  }
  if (from.has_scale()) {
    scale_ = new ::gazebo::msgs::Vector3d(*from.scale_);
  } else {
    scale_ = NULL;
  }
  if (from.has_meta()) {
    meta_ = new ::gazebo::msgs::Visual_Meta(*from.meta_);
  } else {
    meta_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Visual)
}

void Visual::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(type_));
}

Visual::~Visual() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Visual)
  SharedDtor();
}

void Visual::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete geometry_;
  if (this != internal_default_instance()) delete material_;
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete meta_;
}

void Visual::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Visual::descriptor() {
  ::protobuf_visual_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_visual_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Visual& Visual::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_visual_2eproto::scc_info_Visual.base);
  return *internal_default_instance();
}


void Visual::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Visual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugin_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      parent_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(geometry_ != NULL);
      geometry_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(material_ != NULL);
      material_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(scale_ != NULL);
      scale_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(meta_ != NULL);
      meta_->Clear();
    }
  }
  id_ = 0u;
  if (cached_has_bits & 65280u) {
    ::memset(&parent_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&parent_id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Visual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Visual)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gazebo.msgs.Visual.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string parent_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_name().data(), static_cast<int>(this->parent_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gazebo.msgs.Visual.parent_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 parent_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_parent_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cast_shadows = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cast_shadows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cast_shadows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double transparency = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_transparency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transparency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double laser_retro = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_laser_retro();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_retro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Pose pose = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Geometry geometry = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Material material = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_material()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool visible = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool delete_me = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_delete_me();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delete_me_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_static = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_is_static();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_static_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gazebo.msgs.Plugin plugin = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_plugin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Vector3d scale = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Visual.Meta meta = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Visual.Type type = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gazebo::msgs::Visual_Type_IsValid(value)) {
            set_type(static_cast< ::gazebo::msgs::Visual_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                17, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Visual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Visual)
  return false;
#undef DO_
}

void Visual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Visual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Visual.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required string parent_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_name().data(), static_cast<int>(this->parent_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Visual.parent_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parent_name(), output);
  }

  // optional uint32 parent_id = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->parent_id(), output);
  }

  // optional bool cast_shadows = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cast_shadows(), output);
  }

  // optional double transparency = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->transparency(), output);
  }

  // optional double laser_retro = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->laser_retro(), output);
  }

  // optional .gazebo.msgs.Pose pose = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_pose(), output);
  }

  // optional .gazebo.msgs.Geometry geometry = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_geometry(), output);
  }

  // optional .gazebo.msgs.Material material = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_material(), output);
  }

  // optional bool visible = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->visible(), output);
  }

  // optional bool delete_me = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->delete_me(), output);
  }

  // optional bool is_static = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_static(), output);
  }

  // repeated .gazebo.msgs.Plugin plugin = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plugin_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->plugin(static_cast<int>(i)),
      output);
  }

  // optional .gazebo.msgs.Vector3d scale = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_scale(), output);
  }

  // optional .gazebo.msgs.Visual.Meta meta = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_meta(), output);
  }

  // optional .gazebo.msgs.Visual.Type type = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Visual)
}

::google::protobuf::uint8* Visual::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Visual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Visual.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required string parent_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_name().data(), static_cast<int>(this->parent_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Visual.parent_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parent_name(), target);
  }

  // optional uint32 parent_id = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->parent_id(), target);
  }

  // optional bool cast_shadows = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cast_shadows(), target);
  }

  // optional double transparency = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->transparency(), target);
  }

  // optional double laser_retro = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->laser_retro(), target);
  }

  // optional .gazebo.msgs.Pose pose = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_pose(), deterministic, target);
  }

  // optional .gazebo.msgs.Geometry geometry = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_geometry(), deterministic, target);
  }

  // optional .gazebo.msgs.Material material = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_material(), deterministic, target);
  }

  // optional bool visible = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->visible(), target);
  }

  // optional bool delete_me = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->delete_me(), target);
  }

  // optional bool is_static = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_static(), target);
  }

  // repeated .gazebo.msgs.Plugin plugin = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plugin_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->plugin(static_cast<int>(i)), deterministic, target);
  }

  // optional .gazebo.msgs.Vector3d scale = 15;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_scale(), deterministic, target);
  }

  // optional .gazebo.msgs.Visual.Meta meta = 16;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_meta(), deterministic, target);
  }

  // optional .gazebo.msgs.Visual.Type type = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Visual)
  return target;
}

size_t Visual::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.Visual)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_parent_name()) {
    // required string parent_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent_name());
  }

  return total_size;
}
size_t Visual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Visual)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string parent_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .gazebo.msgs.Plugin plugin = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->plugin_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->plugin(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 252u) {
    // optional .gazebo.msgs.Pose pose = 8;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional .gazebo.msgs.Geometry geometry = 9;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geometry_);
    }

    // optional .gazebo.msgs.Material material = 10;
    if (has_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *material_);
    }

    // optional .gazebo.msgs.Vector3d scale = 15;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scale_);
    }

    // optional .gazebo.msgs.Visual.Meta meta = 16;
    if (has_meta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *meta_);
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 parent_id = 4;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_id());
    }

    // optional double transparency = 6;
    if (has_transparency()) {
      total_size += 1 + 8;
    }

    // optional double laser_retro = 7;
    if (has_laser_retro()) {
      total_size += 1 + 8;
    }

    // optional bool cast_shadows = 5;
    if (has_cast_shadows()) {
      total_size += 1 + 1;
    }

    // optional bool visible = 11;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional bool delete_me = 12;
    if (has_delete_me()) {
      total_size += 1 + 1;
    }

    // optional bool is_static = 13;
    if (has_is_static()) {
      total_size += 1 + 1;
    }

    // optional .gazebo.msgs.Visual.Type type = 17;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Visual::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Visual)
  GOOGLE_DCHECK_NE(&from, this);
  const Visual* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Visual>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Visual)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Visual)
    MergeFrom(*source);
  }
}

void Visual::MergeFrom(const Visual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Visual)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plugin_.MergeFrom(from.plugin_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_parent_name();
      parent_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_geometry()->::gazebo::msgs::Geometry::MergeFrom(from.geometry());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_material()->::gazebo::msgs::Material::MergeFrom(from.material());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_scale()->::gazebo::msgs::Vector3d::MergeFrom(from.scale());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_meta()->::gazebo::msgs::Visual_Meta::MergeFrom(from.meta());
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      parent_id_ = from.parent_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      transparency_ = from.transparency_;
    }
    if (cached_has_bits & 0x00000400u) {
      laser_retro_ = from.laser_retro_;
    }
    if (cached_has_bits & 0x00000800u) {
      cast_shadows_ = from.cast_shadows_;
    }
    if (cached_has_bits & 0x00001000u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00002000u) {
      delete_me_ = from.delete_me_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_static_ = from.is_static_;
    }
    if (cached_has_bits & 0x00008000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Visual::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Visual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visual::CopyFrom(const Visual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Visual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visual::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->plugin())) return false;
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  if (has_geometry()) {
    if (!this->geometry_->IsInitialized()) return false;
  }
  if (has_material()) {
    if (!this->material_->IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale_->IsInitialized()) return false;
  }
  return true;
}

void Visual::Swap(Visual* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Visual::InternalSwap(Visual* other) {
  using std::swap;
  CastToBase(&plugin_)->InternalSwap(CastToBase(&other->plugin_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_name_.Swap(&other->parent_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(geometry_, other->geometry_);
  swap(material_, other->material_);
  swap(scale_, other->scale_);
  swap(meta_, other->meta_);
  swap(id_, other->id_);
  swap(parent_id_, other->parent_id_);
  swap(transparency_, other->transparency_);
  swap(laser_retro_, other->laser_retro_);
  swap(cast_shadows_, other->cast_shadows_);
  swap(visible_, other->visible_);
  swap(delete_me_, other->delete_me_);
  swap(is_static_, other->is_static_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Visual::GetMetadata() const {
  protobuf_visual_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_visual_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::Visual_Meta* Arena::CreateMaybeMessage< ::gazebo::msgs::Visual_Meta >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Visual_Meta >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::Visual* Arena::CreateMaybeMessage< ::gazebo::msgs::Visual >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Visual >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
