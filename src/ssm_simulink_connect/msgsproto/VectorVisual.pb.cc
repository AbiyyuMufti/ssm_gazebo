// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VectorVisual.proto

#include "VectorVisual.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_vector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vector3d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3d;
}  // namespace protobuf_vector3d_2eproto
namespace ssm_msgs {
namespace msgs {
class VectorVisualDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VectorVisual>
      _instance;
} _VectorVisual_default_instance_;
}  // namespace msgs
}  // namespace ssm_msgs
namespace protobuf_VectorVisual_2eproto {
static void InitDefaultsVectorVisual() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssm_msgs::msgs::_VectorVisual_default_instance_;
    new (ptr) ::ssm_msgs::msgs::VectorVisual();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssm_msgs::msgs::VectorVisual::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VectorVisual =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVectorVisual}, {
      &protobuf_vector3d_2eproto::scc_info_Vector3d.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_VectorVisual.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssm_msgs::msgs::VectorVisual, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssm_msgs::msgs::VectorVisual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssm_msgs::msgs::VectorVisual, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssm_msgs::msgs::VectorVisual, vector_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ssm_msgs::msgs::VectorVisual)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssm_msgs::msgs::_VectorVisual_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "VectorVisual.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022VectorVisual.proto\022\rssm_msgs.msgs\032\016vec"
      "tor3d.proto\"\\\n\014VectorVisual\022%\n\006center\030\001 "
      "\002(\0132\025.gazebo.msgs.Vector3d\022%\n\006vector\030\002 \002"
      "(\0132\025.gazebo.msgs.Vector3d"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 145);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VectorVisual.proto", &protobuf_RegisterTypes);
  ::protobuf_vector3d_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_VectorVisual_2eproto
namespace ssm_msgs {
namespace msgs {

// ===================================================================

void VectorVisual::InitAsDefaultInstance() {
  ::ssm_msgs::msgs::_VectorVisual_default_instance_._instance.get_mutable()->center_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::ssm_msgs::msgs::_VectorVisual_default_instance_._instance.get_mutable()->vector_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
void VectorVisual::clear_center() {
  if (center_ != NULL) center_->Clear();
  clear_has_center();
}
void VectorVisual::clear_vector() {
  if (vector_ != NULL) vector_->Clear();
  clear_has_vector();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorVisual::kCenterFieldNumber;
const int VectorVisual::kVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorVisual::VectorVisual()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_VectorVisual_2eproto::scc_info_VectorVisual.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssm_msgs.msgs.VectorVisual)
}
VectorVisual::VectorVisual(const VectorVisual& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::gazebo::msgs::Vector3d(*from.center_);
  } else {
    center_ = NULL;
  }
  if (from.has_vector()) {
    vector_ = new ::gazebo::msgs::Vector3d(*from.vector_);
  } else {
    vector_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssm_msgs.msgs.VectorVisual)
}

void VectorVisual::SharedCtor() {
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vector_) -
      reinterpret_cast<char*>(&center_)) + sizeof(vector_));
}

VectorVisual::~VectorVisual() {
  // @@protoc_insertion_point(destructor:ssm_msgs.msgs.VectorVisual)
  SharedDtor();
}

void VectorVisual::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete vector_;
}

void VectorVisual::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VectorVisual::descriptor() {
  ::protobuf_VectorVisual_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_VectorVisual_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VectorVisual& VectorVisual::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_VectorVisual_2eproto::scc_info_VectorVisual.base);
  return *internal_default_instance();
}


void VectorVisual::Clear() {
// @@protoc_insertion_point(message_clear_start:ssm_msgs.msgs.VectorVisual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(center_ != NULL);
      center_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vector_ != NULL);
      vector_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VectorVisual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssm_msgs.msgs.VectorVisual)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Vector3d center = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector3d vector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssm_msgs.msgs.VectorVisual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssm_msgs.msgs.VectorVisual)
  return false;
#undef DO_
}

void VectorVisual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssm_msgs.msgs.VectorVisual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Vector3d center = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_center(), output);
  }

  // required .gazebo.msgs.Vector3d vector = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_vector(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssm_msgs.msgs.VectorVisual)
}

::google::protobuf::uint8* VectorVisual::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssm_msgs.msgs.VectorVisual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Vector3d center = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_center(), deterministic, target);
  }

  // required .gazebo.msgs.Vector3d vector = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_vector(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssm_msgs.msgs.VectorVisual)
  return target;
}

size_t VectorVisual::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ssm_msgs.msgs.VectorVisual)
  size_t total_size = 0;

  if (has_center()) {
    // required .gazebo.msgs.Vector3d center = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_);
  }

  if (has_vector()) {
    // required .gazebo.msgs.Vector3d vector = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vector_);
  }

  return total_size;
}
size_t VectorVisual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssm_msgs.msgs.VectorVisual)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Vector3d center = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_);

    // required .gazebo.msgs.Vector3d vector = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vector_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorVisual::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssm_msgs.msgs.VectorVisual)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorVisual* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VectorVisual>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssm_msgs.msgs.VectorVisual)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssm_msgs.msgs.VectorVisual)
    MergeFrom(*source);
  }
}

void VectorVisual::MergeFrom(const VectorVisual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssm_msgs.msgs.VectorVisual)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_center()->::gazebo::msgs::Vector3d::MergeFrom(from.center());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_vector()->::gazebo::msgs::Vector3d::MergeFrom(from.vector());
    }
  }
}

void VectorVisual::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssm_msgs.msgs.VectorVisual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorVisual::CopyFrom(const VectorVisual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssm_msgs.msgs.VectorVisual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorVisual::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_center()) {
    if (!this->center_->IsInitialized()) return false;
  }
  if (has_vector()) {
    if (!this->vector_->IsInitialized()) return false;
  }
  return true;
}

void VectorVisual::Swap(VectorVisual* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorVisual::InternalSwap(VectorVisual* other) {
  using std::swap;
  swap(center_, other->center_);
  swap(vector_, other->vector_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VectorVisual::GetMetadata() const {
  protobuf_VectorVisual_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_VectorVisual_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace ssm_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssm_msgs::msgs::VectorVisual* Arena::CreateMaybeMessage< ::ssm_msgs::msgs::VectorVisual >(Arena* arena) {
  return Arena::CreateInternal< ::ssm_msgs::msgs::VectorVisual >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
