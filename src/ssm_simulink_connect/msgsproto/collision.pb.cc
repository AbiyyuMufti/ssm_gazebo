// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collision.proto

#include "collision.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_geometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_geometry_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_Geometry;
}  // namespace protobuf_geometry_2eproto
namespace protobuf_pose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pose_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose;
}  // namespace protobuf_pose_2eproto
namespace protobuf_surface_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_surface_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Surface;
}  // namespace protobuf_surface_2eproto
namespace protobuf_visual_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_visual_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_Visual;
}  // namespace protobuf_visual_2eproto
namespace gazebo {
namespace msgs {
class CollisionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Collision>
      _instance;
} _Collision_default_instance_;
}  // namespace msgs
}  // namespace gazebo
namespace protobuf_collision_2eproto {
static void InitDefaultsCollision() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Collision_default_instance_;
    new (ptr) ::gazebo::msgs::Collision();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Collision::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Collision =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCollision}, {
      &protobuf_pose_2eproto::scc_info_Pose.base,
      &protobuf_geometry_2eproto::scc_info_Geometry.base,
      &protobuf_surface_2eproto::scc_info_Surface.base,
      &protobuf_visual_2eproto::scc_info_Visual.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Collision.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Collision, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Collision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Collision, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Collision, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Collision, laser_retro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Collision, max_contacts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Collision, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Collision, geometry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Collision, surface_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Collision, visual_),
  6,
  0,
  4,
  5,
  1,
  2,
  3,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::gazebo::msgs::Collision)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_Collision_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "collision.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017collision.proto\022\013gazebo.msgs\032\npose.pro"
      "to\032\016geometry.proto\032\rsurface.proto\032\014visua"
      "l.proto\"\346\001\n\tCollision\022\n\n\002id\030\001 \002(\r\022\014\n\004nam"
      "e\030\002 \002(\t\022\023\n\013laser_retro\030\003 \001(\001\022\024\n\014max_cont"
      "acts\030\004 \001(\001\022\037\n\004pose\030\005 \001(\0132\021.gazebo.msgs.P"
      "ose\022\'\n\010geometry\030\006 \001(\0132\025.gazebo.msgs.Geom"
      "etry\022%\n\007surface\030\007 \001(\0132\024.gazebo.msgs.Surf"
      "ace\022#\n\006visual\030\010 \003(\0132\023.gazebo.msgs.Visual"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "collision.proto", &protobuf_RegisterTypes);
  ::protobuf_pose_2eproto::AddDescriptors();
  ::protobuf_geometry_2eproto::AddDescriptors();
  ::protobuf_surface_2eproto::AddDescriptors();
  ::protobuf_visual_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_collision_2eproto
namespace gazebo {
namespace msgs {

// ===================================================================

void Collision::InitAsDefaultInstance() {
  ::gazebo::msgs::_Collision_default_instance_._instance.get_mutable()->pose_ = const_cast< ::gazebo::msgs::Pose*>(
      ::gazebo::msgs::Pose::internal_default_instance());
  ::gazebo::msgs::_Collision_default_instance_._instance.get_mutable()->geometry_ = const_cast< ::gazebo::msgs::Geometry*>(
      ::gazebo::msgs::Geometry::internal_default_instance());
  ::gazebo::msgs::_Collision_default_instance_._instance.get_mutable()->surface_ = const_cast< ::gazebo::msgs::Surface*>(
      ::gazebo::msgs::Surface::internal_default_instance());
}
void Collision::clear_pose() {
  if (pose_ != NULL) pose_->Clear();
  clear_has_pose();
}
void Collision::clear_geometry() {
  if (geometry_ != NULL) geometry_->Clear();
  clear_has_geometry();
}
void Collision::clear_surface() {
  if (surface_ != NULL) surface_->Clear();
  clear_has_surface();
}
void Collision::clear_visual() {
  visual_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Collision::kIdFieldNumber;
const int Collision::kNameFieldNumber;
const int Collision::kLaserRetroFieldNumber;
const int Collision::kMaxContactsFieldNumber;
const int Collision::kPoseFieldNumber;
const int Collision::kGeometryFieldNumber;
const int Collision::kSurfaceFieldNumber;
const int Collision::kVisualFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Collision::Collision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_collision_2eproto::scc_info_Collision.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Collision)
}
Collision::Collision(const Collision& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      visual_(from.visual_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_pose()) {
    pose_ = new ::gazebo::msgs::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_geometry()) {
    geometry_ = new ::gazebo::msgs::Geometry(*from.geometry_);
  } else {
    geometry_ = NULL;
  }
  if (from.has_surface()) {
    surface_ = new ::gazebo::msgs::Surface(*from.surface_);
  } else {
    surface_ = NULL;
  }
  ::memcpy(&laser_retro_, &from.laser_retro_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&laser_retro_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Collision)
}

void Collision::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(id_));
}

Collision::~Collision() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Collision)
  SharedDtor();
}

void Collision::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete geometry_;
  if (this != internal_default_instance()) delete surface_;
}

void Collision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Collision::descriptor() {
  ::protobuf_collision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_collision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Collision& Collision::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_collision_2eproto::scc_info_Collision.base);
  return *internal_default_instance();
}


void Collision::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Collision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visual_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(geometry_ != NULL);
      geometry_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(surface_ != NULL);
      surface_->Clear();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&laser_retro_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&laser_retro_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Collision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Collision)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gazebo.msgs.Collision.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double laser_retro = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_laser_retro();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_retro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_contacts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_max_contacts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_contacts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Pose pose = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Geometry geometry = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Surface surface = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_surface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gazebo.msgs.Visual visual = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_visual()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Collision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Collision)
  return false;
#undef DO_
}

void Collision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Collision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Collision.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional double laser_retro = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->laser_retro(), output);
  }

  // optional double max_contacts = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_contacts(), output);
  }

  // optional .gazebo.msgs.Pose pose = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_pose(), output);
  }

  // optional .gazebo.msgs.Geometry geometry = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_geometry(), output);
  }

  // optional .gazebo.msgs.Surface surface = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_surface(), output);
  }

  // repeated .gazebo.msgs.Visual visual = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->visual_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->visual(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Collision)
}

::google::protobuf::uint8* Collision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Collision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Collision.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional double laser_retro = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->laser_retro(), target);
  }

  // optional double max_contacts = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_contacts(), target);
  }

  // optional .gazebo.msgs.Pose pose = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_pose(), deterministic, target);
  }

  // optional .gazebo.msgs.Geometry geometry = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_geometry(), deterministic, target);
  }

  // optional .gazebo.msgs.Surface surface = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_surface(), deterministic, target);
  }

  // repeated .gazebo.msgs.Visual visual = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->visual_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->visual(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Collision)
  return target;
}

size_t Collision::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.Collision)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  return total_size;
}
size_t Collision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Collision)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000041) ^ 0x00000041) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .gazebo.msgs.Visual visual = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->visual_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->visual(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 62u) {
    // optional .gazebo.msgs.Pose pose = 5;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional .gazebo.msgs.Geometry geometry = 6;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geometry_);
    }

    // optional .gazebo.msgs.Surface surface = 7;
    if (has_surface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *surface_);
    }

    // optional double laser_retro = 3;
    if (has_laser_retro()) {
      total_size += 1 + 8;
    }

    // optional double max_contacts = 4;
    if (has_max_contacts()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Collision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Collision)
  GOOGLE_DCHECK_NE(&from, this);
  const Collision* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Collision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Collision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Collision)
    MergeFrom(*source);
  }
}

void Collision::MergeFrom(const Collision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Collision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  visual_.MergeFrom(from.visual_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_geometry()->::gazebo::msgs::Geometry::MergeFrom(from.geometry());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_surface()->::gazebo::msgs::Surface::MergeFrom(from.surface());
    }
    if (cached_has_bits & 0x00000010u) {
      laser_retro_ = from.laser_retro_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_contacts_ = from.max_contacts_;
    }
    if (cached_has_bits & 0x00000040u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Collision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Collision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collision::CopyFrom(const Collision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Collision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collision::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->visual())) return false;
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  if (has_geometry()) {
    if (!this->geometry_->IsInitialized()) return false;
  }
  if (has_surface()) {
    if (!this->surface_->IsInitialized()) return false;
  }
  return true;
}

void Collision::Swap(Collision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Collision::InternalSwap(Collision* other) {
  using std::swap;
  CastToBase(&visual_)->InternalSwap(CastToBase(&other->visual_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(geometry_, other->geometry_);
  swap(surface_, other->surface_);
  swap(laser_retro_, other->laser_retro_);
  swap(max_contacts_, other->max_contacts_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Collision::GetMetadata() const {
  protobuf_collision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_collision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::Collision* Arena::CreateMaybeMessage< ::gazebo::msgs::Collision >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Collision >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
