// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: joint_wrench.proto

#include "joint_wrench.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_wrench_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_wrench_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Wrench;
}  // namespace protobuf_wrench_2eproto
namespace gazebo {
namespace msgs {
class JointWrenchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JointWrench>
      _instance;
} _JointWrench_default_instance_;
}  // namespace msgs
}  // namespace gazebo
namespace protobuf_joint_5fwrench_2eproto {
static void InitDefaultsJointWrench() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_JointWrench_default_instance_;
    new (ptr) ::gazebo::msgs::JointWrench();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::JointWrench::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_JointWrench =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJointWrench}, {
      &protobuf_wrench_2eproto::scc_info_Wrench.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_JointWrench.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::JointWrench, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::JointWrench, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::JointWrench, body_1_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::JointWrench, body_1_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::JointWrench, body_2_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::JointWrench, body_2_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::JointWrench, body_1_wrench_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::JointWrench, body_2_wrench_),
  0,
  4,
  1,
  5,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::gazebo::msgs::JointWrench)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_JointWrench_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "joint_wrench.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022joint_wrench.proto\022\013gazebo.msgs\032\014wrenc"
      "h.proto\"\265\001\n\013JointWrench\022\023\n\013body_1_name\030\001"
      " \002(\t\022\021\n\tbody_1_id\030\002 \002(\r\022\023\n\013body_2_name\030\003"
      " \002(\t\022\021\n\tbody_2_id\030\004 \002(\r\022*\n\rbody_1_wrench"
      "\030\005 \002(\0132\023.gazebo.msgs.Wrench\022*\n\rbody_2_wr"
      "ench\030\006 \002(\0132\023.gazebo.msgs.Wrench"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "joint_wrench.proto", &protobuf_RegisterTypes);
  ::protobuf_wrench_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_joint_5fwrench_2eproto
namespace gazebo {
namespace msgs {

// ===================================================================

void JointWrench::InitAsDefaultInstance() {
  ::gazebo::msgs::_JointWrench_default_instance_._instance.get_mutable()->body_1_wrench_ = const_cast< ::gazebo::msgs::Wrench*>(
      ::gazebo::msgs::Wrench::internal_default_instance());
  ::gazebo::msgs::_JointWrench_default_instance_._instance.get_mutable()->body_2_wrench_ = const_cast< ::gazebo::msgs::Wrench*>(
      ::gazebo::msgs::Wrench::internal_default_instance());
}
void JointWrench::clear_body_1_wrench() {
  if (body_1_wrench_ != NULL) body_1_wrench_->Clear();
  clear_has_body_1_wrench();
}
void JointWrench::clear_body_2_wrench() {
  if (body_2_wrench_ != NULL) body_2_wrench_->Clear();
  clear_has_body_2_wrench();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointWrench::kBody1NameFieldNumber;
const int JointWrench::kBody1IdFieldNumber;
const int JointWrench::kBody2NameFieldNumber;
const int JointWrench::kBody2IdFieldNumber;
const int JointWrench::kBody1WrenchFieldNumber;
const int JointWrench::kBody2WrenchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointWrench::JointWrench()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_joint_5fwrench_2eproto::scc_info_JointWrench.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.JointWrench)
}
JointWrench::JointWrench(const JointWrench& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_1_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body_1_name()) {
    body_1_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_1_name_);
  }
  body_2_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body_2_name()) {
    body_2_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_2_name_);
  }
  if (from.has_body_1_wrench()) {
    body_1_wrench_ = new ::gazebo::msgs::Wrench(*from.body_1_wrench_);
  } else {
    body_1_wrench_ = NULL;
  }
  if (from.has_body_2_wrench()) {
    body_2_wrench_ = new ::gazebo::msgs::Wrench(*from.body_2_wrench_);
  } else {
    body_2_wrench_ = NULL;
  }
  ::memcpy(&body_1_id_, &from.body_1_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&body_2_id_) -
    reinterpret_cast<char*>(&body_1_id_)) + sizeof(body_2_id_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.JointWrench)
}

void JointWrench::SharedCtor() {
  body_1_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_2_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&body_1_wrench_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&body_2_id_) -
      reinterpret_cast<char*>(&body_1_wrench_)) + sizeof(body_2_id_));
}

JointWrench::~JointWrench() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.JointWrench)
  SharedDtor();
}

void JointWrench::SharedDtor() {
  body_1_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_2_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete body_1_wrench_;
  if (this != internal_default_instance()) delete body_2_wrench_;
}

void JointWrench::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JointWrench::descriptor() {
  ::protobuf_joint_5fwrench_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_joint_5fwrench_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JointWrench& JointWrench::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_joint_5fwrench_2eproto::scc_info_JointWrench.base);
  return *internal_default_instance();
}


void JointWrench::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.JointWrench)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      body_1_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      body_2_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(body_1_wrench_ != NULL);
      body_1_wrench_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(body_2_wrench_ != NULL);
      body_2_wrench_->Clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&body_1_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&body_2_id_) -
        reinterpret_cast<char*>(&body_1_id_)) + sizeof(body_2_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JointWrench::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.JointWrench)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string body_1_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body_1_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body_1_name().data(), static_cast<int>(this->body_1_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gazebo.msgs.JointWrench.body_1_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 body_1_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_body_1_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_1_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string body_2_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body_2_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body_2_name().data(), static_cast<int>(this->body_2_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gazebo.msgs.JointWrench.body_2_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 body_2_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_body_2_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_2_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Wrench body_1_wrench = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_body_1_wrench()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Wrench body_2_wrench = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_body_2_wrench()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.JointWrench)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.JointWrench)
  return false;
#undef DO_
}

void JointWrench::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.JointWrench)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string body_1_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_1_name().data(), static_cast<int>(this->body_1_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.JointWrench.body_1_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->body_1_name(), output);
  }

  // required uint32 body_1_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->body_1_id(), output);
  }

  // required string body_2_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_2_name().data(), static_cast<int>(this->body_2_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.JointWrench.body_2_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->body_2_name(), output);
  }

  // required uint32 body_2_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->body_2_id(), output);
  }

  // required .gazebo.msgs.Wrench body_1_wrench = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_body_1_wrench(), output);
  }

  // required .gazebo.msgs.Wrench body_2_wrench = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_body_2_wrench(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.JointWrench)
}

::google::protobuf::uint8* JointWrench::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.JointWrench)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string body_1_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_1_name().data(), static_cast<int>(this->body_1_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.JointWrench.body_1_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->body_1_name(), target);
  }

  // required uint32 body_1_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->body_1_id(), target);
  }

  // required string body_2_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_2_name().data(), static_cast<int>(this->body_2_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.JointWrench.body_2_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->body_2_name(), target);
  }

  // required uint32 body_2_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->body_2_id(), target);
  }

  // required .gazebo.msgs.Wrench body_1_wrench = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_body_1_wrench(), deterministic, target);
  }

  // required .gazebo.msgs.Wrench body_2_wrench = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_body_2_wrench(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.JointWrench)
  return target;
}

size_t JointWrench::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.JointWrench)
  size_t total_size = 0;

  if (has_body_1_name()) {
    // required string body_1_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body_1_name());
  }

  if (has_body_2_name()) {
    // required string body_2_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body_2_name());
  }

  if (has_body_1_wrench()) {
    // required .gazebo.msgs.Wrench body_1_wrench = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *body_1_wrench_);
  }

  if (has_body_2_wrench()) {
    // required .gazebo.msgs.Wrench body_2_wrench = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *body_2_wrench_);
  }

  if (has_body_1_id()) {
    // required uint32 body_1_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->body_1_id());
  }

  if (has_body_2_id()) {
    // required uint32 body_2_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->body_2_id());
  }

  return total_size;
}
size_t JointWrench::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.JointWrench)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string body_1_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body_1_name());

    // required string body_2_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body_2_name());

    // required .gazebo.msgs.Wrench body_1_wrench = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *body_1_wrench_);

    // required .gazebo.msgs.Wrench body_2_wrench = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *body_2_wrench_);

    // required uint32 body_1_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->body_1_id());

    // required uint32 body_2_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->body_2_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointWrench::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.JointWrench)
  GOOGLE_DCHECK_NE(&from, this);
  const JointWrench* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JointWrench>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.JointWrench)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.JointWrench)
    MergeFrom(*source);
  }
}

void JointWrench::MergeFrom(const JointWrench& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.JointWrench)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_body_1_name();
      body_1_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_1_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_body_2_name();
      body_2_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_2_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_body_1_wrench()->::gazebo::msgs::Wrench::MergeFrom(from.body_1_wrench());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_body_2_wrench()->::gazebo::msgs::Wrench::MergeFrom(from.body_2_wrench());
    }
    if (cached_has_bits & 0x00000010u) {
      body_1_id_ = from.body_1_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      body_2_id_ = from.body_2_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JointWrench::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.JointWrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointWrench::CopyFrom(const JointWrench& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.JointWrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointWrench::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_body_1_wrench()) {
    if (!this->body_1_wrench_->IsInitialized()) return false;
  }
  if (has_body_2_wrench()) {
    if (!this->body_2_wrench_->IsInitialized()) return false;
  }
  return true;
}

void JointWrench::Swap(JointWrench* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointWrench::InternalSwap(JointWrench* other) {
  using std::swap;
  body_1_name_.Swap(&other->body_1_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  body_2_name_.Swap(&other->body_2_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(body_1_wrench_, other->body_1_wrench_);
  swap(body_2_wrench_, other->body_2_wrench_);
  swap(body_1_id_, other->body_1_id_);
  swap(body_2_id_, other->body_2_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JointWrench::GetMetadata() const {
  protobuf_joint_5fwrench_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_joint_5fwrench_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::JointWrench* Arena::CreateMaybeMessage< ::gazebo::msgs::JointWrench >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::JointWrench >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
