// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamic_state.proto

#include "dynamic_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_pose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pose_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose;
}  // namespace protobuf_pose_2eproto
namespace protobuf_time_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_time_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Time;
}  // namespace protobuf_time_2eproto
namespace protobuf_vector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vector3d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3d;
}  // namespace protobuf_vector3d_2eproto
namespace ssm_msgs {
namespace msgs {
class DynamicStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DynamicState>
      _instance;
} _DynamicState_default_instance_;
}  // namespace msgs
}  // namespace ssm_msgs
namespace protobuf_dynamic_5fstate_2eproto {
static void InitDefaultsDynamicState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssm_msgs::msgs::_DynamicState_default_instance_;
    new (ptr) ::ssm_msgs::msgs::DynamicState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssm_msgs::msgs::DynamicState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_DynamicState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsDynamicState}, {
      &protobuf_vector3d_2eproto::scc_info_Vector3d.base,
      &protobuf_pose_2eproto::scc_info_Pose.base,
      &protobuf_time_2eproto::scc_info_Time.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DynamicState.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssm_msgs::msgs::DynamicState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssm_msgs::msgs::DynamicState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssm_msgs::msgs::DynamicState, linearvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssm_msgs::msgs::DynamicState, angluarvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssm_msgs::msgs::DynamicState, linearacceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssm_msgs::msgs::DynamicState, angluaracceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssm_msgs::msgs::DynamicState, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssm_msgs::msgs::DynamicState, time_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::ssm_msgs::msgs::DynamicState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssm_msgs::msgs::_DynamicState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "dynamic_state.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023dynamic_state.proto\022\rssm_msgs.msgs\032\016ve"
      "ctor3d.proto\032\npose.proto\032\ntime.proto\"\226\002\n"
      "\014DynamicState\022-\n\016LinearVelocity\030\001 \002(\0132\025."
      "gazebo.msgs.Vector3d\022.\n\017AngluarVelocity\030"
      "\002 \002(\0132\025.gazebo.msgs.Vector3d\0221\n\022LinearAc"
      "celeration\030\003 \002(\0132\025.gazebo.msgs.Vector3d\022"
      "2\n\023AngluarAcceleration\030\004 \002(\0132\025.gazebo.ms"
      "gs.Vector3d\022\037\n\004Pose\030\005 \002(\0132\021.gazebo.msgs."
      "Pose\022\037\n\004Time\030\006 \002(\0132\021.gazebo.msgs.Time"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 357);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dynamic_state.proto", &protobuf_RegisterTypes);
  ::protobuf_vector3d_2eproto::AddDescriptors();
  ::protobuf_pose_2eproto::AddDescriptors();
  ::protobuf_time_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_dynamic_5fstate_2eproto
namespace ssm_msgs {
namespace msgs {

// ===================================================================

void DynamicState::InitAsDefaultInstance() {
  ::ssm_msgs::msgs::_DynamicState_default_instance_._instance.get_mutable()->linearvelocity_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::ssm_msgs::msgs::_DynamicState_default_instance_._instance.get_mutable()->angluarvelocity_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::ssm_msgs::msgs::_DynamicState_default_instance_._instance.get_mutable()->linearacceleration_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::ssm_msgs::msgs::_DynamicState_default_instance_._instance.get_mutable()->angluaracceleration_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::ssm_msgs::msgs::_DynamicState_default_instance_._instance.get_mutable()->pose_ = const_cast< ::gazebo::msgs::Pose*>(
      ::gazebo::msgs::Pose::internal_default_instance());
  ::ssm_msgs::msgs::_DynamicState_default_instance_._instance.get_mutable()->time_ = const_cast< ::gazebo::msgs::Time*>(
      ::gazebo::msgs::Time::internal_default_instance());
}
void DynamicState::clear_linearvelocity() {
  if (linearvelocity_ != NULL) linearvelocity_->Clear();
  clear_has_linearvelocity();
}
void DynamicState::clear_angluarvelocity() {
  if (angluarvelocity_ != NULL) angluarvelocity_->Clear();
  clear_has_angluarvelocity();
}
void DynamicState::clear_linearacceleration() {
  if (linearacceleration_ != NULL) linearacceleration_->Clear();
  clear_has_linearacceleration();
}
void DynamicState::clear_angluaracceleration() {
  if (angluaracceleration_ != NULL) angluaracceleration_->Clear();
  clear_has_angluaracceleration();
}
void DynamicState::clear_pose() {
  if (pose_ != NULL) pose_->Clear();
  clear_has_pose();
}
void DynamicState::clear_time() {
  if (time_ != NULL) time_->Clear();
  clear_has_time();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynamicState::kLinearVelocityFieldNumber;
const int DynamicState::kAngluarVelocityFieldNumber;
const int DynamicState::kLinearAccelerationFieldNumber;
const int DynamicState::kAngluarAccelerationFieldNumber;
const int DynamicState::kPoseFieldNumber;
const int DynamicState::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynamicState::DynamicState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dynamic_5fstate_2eproto::scc_info_DynamicState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssm_msgs.msgs.DynamicState)
}
DynamicState::DynamicState(const DynamicState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_linearvelocity()) {
    linearvelocity_ = new ::gazebo::msgs::Vector3d(*from.linearvelocity_);
  } else {
    linearvelocity_ = NULL;
  }
  if (from.has_angluarvelocity()) {
    angluarvelocity_ = new ::gazebo::msgs::Vector3d(*from.angluarvelocity_);
  } else {
    angluarvelocity_ = NULL;
  }
  if (from.has_linearacceleration()) {
    linearacceleration_ = new ::gazebo::msgs::Vector3d(*from.linearacceleration_);
  } else {
    linearacceleration_ = NULL;
  }
  if (from.has_angluaracceleration()) {
    angluaracceleration_ = new ::gazebo::msgs::Vector3d(*from.angluaracceleration_);
  } else {
    angluaracceleration_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::gazebo::msgs::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_time()) {
    time_ = new ::gazebo::msgs::Time(*from.time_);
  } else {
    time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssm_msgs.msgs.DynamicState)
}

void DynamicState::SharedCtor() {
  ::memset(&linearvelocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&linearvelocity_)) + sizeof(time_));
}

DynamicState::~DynamicState() {
  // @@protoc_insertion_point(destructor:ssm_msgs.msgs.DynamicState)
  SharedDtor();
}

void DynamicState::SharedDtor() {
  if (this != internal_default_instance()) delete linearvelocity_;
  if (this != internal_default_instance()) delete angluarvelocity_;
  if (this != internal_default_instance()) delete linearacceleration_;
  if (this != internal_default_instance()) delete angluaracceleration_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete time_;
}

void DynamicState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DynamicState::descriptor() {
  ::protobuf_dynamic_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DynamicState& DynamicState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dynamic_5fstate_2eproto::scc_info_DynamicState.base);
  return *internal_default_instance();
}


void DynamicState::Clear() {
// @@protoc_insertion_point(message_clear_start:ssm_msgs.msgs.DynamicState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(linearvelocity_ != NULL);
      linearvelocity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(angluarvelocity_ != NULL);
      angluarvelocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(linearacceleration_ != NULL);
      linearacceleration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(angluaracceleration_ != NULL);
      angluaracceleration_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(time_ != NULL);
      time_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DynamicState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssm_msgs.msgs.DynamicState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Vector3d LinearVelocity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linearvelocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector3d AngluarVelocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angluarvelocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector3d LinearAcceleration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linearacceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector3d AngluarAcceleration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angluaracceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Pose Pose = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Time Time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssm_msgs.msgs.DynamicState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssm_msgs.msgs.DynamicState)
  return false;
#undef DO_
}

void DynamicState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssm_msgs.msgs.DynamicState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Vector3d LinearVelocity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_linearvelocity(), output);
  }

  // required .gazebo.msgs.Vector3d AngluarVelocity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_angluarvelocity(), output);
  }

  // required .gazebo.msgs.Vector3d LinearAcceleration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_linearacceleration(), output);
  }

  // required .gazebo.msgs.Vector3d AngluarAcceleration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_angluaracceleration(), output);
  }

  // required .gazebo.msgs.Pose Pose = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_pose(), output);
  }

  // required .gazebo.msgs.Time Time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssm_msgs.msgs.DynamicState)
}

::google::protobuf::uint8* DynamicState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssm_msgs.msgs.DynamicState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Vector3d LinearVelocity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_linearvelocity(), deterministic, target);
  }

  // required .gazebo.msgs.Vector3d AngluarVelocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_angluarvelocity(), deterministic, target);
  }

  // required .gazebo.msgs.Vector3d LinearAcceleration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_linearacceleration(), deterministic, target);
  }

  // required .gazebo.msgs.Vector3d AngluarAcceleration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_angluaracceleration(), deterministic, target);
  }

  // required .gazebo.msgs.Pose Pose = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_pose(), deterministic, target);
  }

  // required .gazebo.msgs.Time Time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_time(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssm_msgs.msgs.DynamicState)
  return target;
}

size_t DynamicState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ssm_msgs.msgs.DynamicState)
  size_t total_size = 0;

  if (has_linearvelocity()) {
    // required .gazebo.msgs.Vector3d LinearVelocity = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linearvelocity_);
  }

  if (has_angluarvelocity()) {
    // required .gazebo.msgs.Vector3d AngluarVelocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angluarvelocity_);
  }

  if (has_linearacceleration()) {
    // required .gazebo.msgs.Vector3d LinearAcceleration = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linearacceleration_);
  }

  if (has_angluaracceleration()) {
    // required .gazebo.msgs.Vector3d AngluarAcceleration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angluaracceleration_);
  }

  if (has_pose()) {
    // required .gazebo.msgs.Pose Pose = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (has_time()) {
    // required .gazebo.msgs.Time Time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);
  }

  return total_size;
}
size_t DynamicState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssm_msgs.msgs.DynamicState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Vector3d LinearVelocity = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linearvelocity_);

    // required .gazebo.msgs.Vector3d AngluarVelocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angluarvelocity_);

    // required .gazebo.msgs.Vector3d LinearAcceleration = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linearacceleration_);

    // required .gazebo.msgs.Vector3d AngluarAcceleration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angluaracceleration_);

    // required .gazebo.msgs.Pose Pose = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);

    // required .gazebo.msgs.Time Time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssm_msgs.msgs.DynamicState)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DynamicState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssm_msgs.msgs.DynamicState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssm_msgs.msgs.DynamicState)
    MergeFrom(*source);
  }
}

void DynamicState::MergeFrom(const DynamicState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssm_msgs.msgs.DynamicState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_linearvelocity()->::gazebo::msgs::Vector3d::MergeFrom(from.linearvelocity());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_angluarvelocity()->::gazebo::msgs::Vector3d::MergeFrom(from.angluarvelocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_linearacceleration()->::gazebo::msgs::Vector3d::MergeFrom(from.linearacceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_angluaracceleration()->::gazebo::msgs::Vector3d::MergeFrom(from.angluaracceleration());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_time()->::gazebo::msgs::Time::MergeFrom(from.time());
    }
  }
}

void DynamicState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssm_msgs.msgs.DynamicState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicState::CopyFrom(const DynamicState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssm_msgs.msgs.DynamicState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_linearvelocity()) {
    if (!this->linearvelocity_->IsInitialized()) return false;
  }
  if (has_angluarvelocity()) {
    if (!this->angluarvelocity_->IsInitialized()) return false;
  }
  if (has_linearacceleration()) {
    if (!this->linearacceleration_->IsInitialized()) return false;
  }
  if (has_angluaracceleration()) {
    if (!this->angluaracceleration_->IsInitialized()) return false;
  }
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  if (has_time()) {
    if (!this->time_->IsInitialized()) return false;
  }
  return true;
}

void DynamicState::Swap(DynamicState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DynamicState::InternalSwap(DynamicState* other) {
  using std::swap;
  swap(linearvelocity_, other->linearvelocity_);
  swap(angluarvelocity_, other->angluarvelocity_);
  swap(linearacceleration_, other->linearacceleration_);
  swap(angluaracceleration_, other->angluaracceleration_);
  swap(pose_, other->pose_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DynamicState::GetMetadata() const {
  protobuf_dynamic_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace ssm_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssm_msgs::msgs::DynamicState* Arena::CreateMaybeMessage< ::ssm_msgs::msgs::DynamicState >(Arena* arena) {
  return Arena::CreateInternal< ::ssm_msgs::msgs::DynamicState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
