// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heightmapgeom.proto

#include "heightmapgeom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_heightmapgeom_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_heightmapgeom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HeightmapGeom_Blend;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_heightmapgeom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HeightmapGeom_Texture;
}  // namespace protobuf_heightmapgeom_2eproto
namespace protobuf_image_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_image_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Image;
}  // namespace protobuf_image_2eproto
namespace protobuf_vector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vector3d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3d;
}  // namespace protobuf_vector3d_2eproto
namespace gazebo {
namespace msgs {
class HeightmapGeom_TextureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeightmapGeom_Texture>
      _instance;
} _HeightmapGeom_Texture_default_instance_;
class HeightmapGeom_BlendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeightmapGeom_Blend>
      _instance;
} _HeightmapGeom_Blend_default_instance_;
class HeightmapGeomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeightmapGeom>
      _instance;
} _HeightmapGeom_default_instance_;
}  // namespace msgs
}  // namespace gazebo
namespace protobuf_heightmapgeom_2eproto {
static void InitDefaultsHeightmapGeom_Texture() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_HeightmapGeom_Texture_default_instance_;
    new (ptr) ::gazebo::msgs::HeightmapGeom_Texture();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::HeightmapGeom_Texture::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HeightmapGeom_Texture =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeightmapGeom_Texture}, {}};

static void InitDefaultsHeightmapGeom_Blend() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_HeightmapGeom_Blend_default_instance_;
    new (ptr) ::gazebo::msgs::HeightmapGeom_Blend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::HeightmapGeom_Blend::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HeightmapGeom_Blend =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeightmapGeom_Blend}, {}};

static void InitDefaultsHeightmapGeom() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_HeightmapGeom_default_instance_;
    new (ptr) ::gazebo::msgs::HeightmapGeom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::HeightmapGeom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_HeightmapGeom =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsHeightmapGeom}, {
      &protobuf_image_2eproto::scc_info_Image.base,
      &protobuf_vector3d_2eproto::scc_info_Vector3d.base,
      &protobuf_heightmapgeom_2eproto::scc_info_HeightmapGeom_Texture.base,
      &protobuf_heightmapgeom_2eproto::scc_info_HeightmapGeom_Blend.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HeightmapGeom_Texture.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeightmapGeom_Blend.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeightmapGeom.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Texture, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Texture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Texture, diffuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Texture, normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Texture, size_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Blend, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Blend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Blend, min_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom_Blend, fade_dist_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, heights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, texture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, blend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, use_terrain_paging_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::HeightmapGeom, sampling_),
  1,
  2,
  3,
  ~0u,
  4,
  5,
  ~0u,
  ~0u,
  6,
  0,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::gazebo::msgs::HeightmapGeom_Texture)},
  { 11, 18, sizeof(::gazebo::msgs::HeightmapGeom_Blend)},
  { 20, 36, sizeof(::gazebo::msgs::HeightmapGeom)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_HeightmapGeom_Texture_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_HeightmapGeom_Blend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_HeightmapGeom_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "heightmapgeom.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023heightmapgeom.proto\022\013gazebo.msgs\032\013imag"
      "e.proto\032\016vector3d.proto\"\276\003\n\rHeightmapGeo"
      "m\022!\n\005image\030\001 \001(\0132\022.gazebo.msgs.Image\022#\n\004"
      "size\030\002 \002(\0132\025.gazebo.msgs.Vector3d\022%\n\006ori"
      "gin\030\003 \001(\0132\025.gazebo.msgs.Vector3d\022\017\n\007heig"
      "hts\030\004 \003(\002\022\r\n\005width\030\005 \001(\005\022\016\n\006height\030\006 \001(\005"
      "\0223\n\007texture\030\007 \003(\0132\".gazebo.msgs.Heightma"
      "pGeom.Texture\022/\n\005blend\030\010 \003(\0132 .gazebo.ms"
      "gs.HeightmapGeom.Blend\022\032\n\022use_terrain_pa"
      "ging\030\t \001(\010\022\020\n\010filename\030\n \001(\t\022\020\n\010sampling"
      "\030\013 \001(\r\0328\n\007Texture\022\017\n\007diffuse\030\001 \002(\t\022\016\n\006no"
      "rmal\030\002 \002(\t\022\014\n\004size\030\003 \002(\001\032.\n\005Blend\022\022\n\nmin"
      "_height\030\001 \002(\001\022\021\n\tfade_dist\030\002 \002(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 512);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "heightmapgeom.proto", &protobuf_RegisterTypes);
  ::protobuf_image_2eproto::AddDescriptors();
  ::protobuf_vector3d_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_heightmapgeom_2eproto
namespace gazebo {
namespace msgs {

// ===================================================================

void HeightmapGeom_Texture::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeightmapGeom_Texture::kDiffuseFieldNumber;
const int HeightmapGeom_Texture::kNormalFieldNumber;
const int HeightmapGeom_Texture::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeightmapGeom_Texture::HeightmapGeom_Texture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_heightmapgeom_2eproto::scc_info_HeightmapGeom_Texture.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.HeightmapGeom.Texture)
}
HeightmapGeom_Texture::HeightmapGeom_Texture(const HeightmapGeom_Texture& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diffuse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_diffuse()) {
    diffuse_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diffuse_);
  }
  normal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_normal()) {
    normal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.HeightmapGeom.Texture)
}

void HeightmapGeom_Texture::SharedCtor() {
  diffuse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
}

HeightmapGeom_Texture::~HeightmapGeom_Texture() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.HeightmapGeom.Texture)
  SharedDtor();
}

void HeightmapGeom_Texture::SharedDtor() {
  diffuse_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeightmapGeom_Texture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeightmapGeom_Texture::descriptor() {
  ::protobuf_heightmapgeom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_heightmapgeom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeightmapGeom_Texture& HeightmapGeom_Texture::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_heightmapgeom_2eproto::scc_info_HeightmapGeom_Texture.base);
  return *internal_default_instance();
}


void HeightmapGeom_Texture::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.HeightmapGeom.Texture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      diffuse_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      normal_.ClearNonDefaultToEmptyNoArena();
    }
  }
  size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeightmapGeom_Texture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.HeightmapGeom.Texture)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string diffuse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diffuse()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->diffuse().data(), static_cast<int>(this->diffuse().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gazebo.msgs.HeightmapGeom.Texture.diffuse");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string normal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->normal().data(), static_cast<int>(this->normal().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gazebo.msgs.HeightmapGeom.Texture.normal");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.HeightmapGeom.Texture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.HeightmapGeom.Texture)
  return false;
#undef DO_
}

void HeightmapGeom_Texture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.HeightmapGeom.Texture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string diffuse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->diffuse().data(), static_cast<int>(this->diffuse().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.HeightmapGeom.Texture.diffuse");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diffuse(), output);
  }

  // required string normal = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normal().data(), static_cast<int>(this->normal().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.HeightmapGeom.Texture.normal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->normal(), output);
  }

  // required double size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.HeightmapGeom.Texture)
}

::google::protobuf::uint8* HeightmapGeom_Texture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.HeightmapGeom.Texture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string diffuse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->diffuse().data(), static_cast<int>(this->diffuse().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.HeightmapGeom.Texture.diffuse");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->diffuse(), target);
  }

  // required string normal = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normal().data(), static_cast<int>(this->normal().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.HeightmapGeom.Texture.normal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->normal(), target);
  }

  // required double size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.HeightmapGeom.Texture)
  return target;
}

size_t HeightmapGeom_Texture::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.HeightmapGeom.Texture)
  size_t total_size = 0;

  if (has_diffuse()) {
    // required string diffuse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diffuse());
  }

  if (has_normal()) {
    // required string normal = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->normal());
  }

  if (has_size()) {
    // required double size = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t HeightmapGeom_Texture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.HeightmapGeom.Texture)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string diffuse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diffuse());

    // required string normal = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->normal());

    // required double size = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeightmapGeom_Texture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.HeightmapGeom.Texture)
  GOOGLE_DCHECK_NE(&from, this);
  const HeightmapGeom_Texture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeightmapGeom_Texture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.HeightmapGeom.Texture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.HeightmapGeom.Texture)
    MergeFrom(*source);
  }
}

void HeightmapGeom_Texture::MergeFrom(const HeightmapGeom_Texture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.HeightmapGeom.Texture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_diffuse();
      diffuse_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diffuse_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_normal();
      normal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_);
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeightmapGeom_Texture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.HeightmapGeom.Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapGeom_Texture::CopyFrom(const HeightmapGeom_Texture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.HeightmapGeom.Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapGeom_Texture::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void HeightmapGeom_Texture::Swap(HeightmapGeom_Texture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeightmapGeom_Texture::InternalSwap(HeightmapGeom_Texture* other) {
  using std::swap;
  diffuse_.Swap(&other->diffuse_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  normal_.Swap(&other->normal_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeightmapGeom_Texture::GetMetadata() const {
  protobuf_heightmapgeom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_heightmapgeom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeightmapGeom_Blend::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeightmapGeom_Blend::kMinHeightFieldNumber;
const int HeightmapGeom_Blend::kFadeDistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeightmapGeom_Blend::HeightmapGeom_Blend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_heightmapgeom_2eproto::scc_info_HeightmapGeom_Blend.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.HeightmapGeom.Blend)
}
HeightmapGeom_Blend::HeightmapGeom_Blend(const HeightmapGeom_Blend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_height_, &from.min_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&fade_dist_) -
    reinterpret_cast<char*>(&min_height_)) + sizeof(fade_dist_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.HeightmapGeom.Blend)
}

void HeightmapGeom_Blend::SharedCtor() {
  ::memset(&min_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fade_dist_) -
      reinterpret_cast<char*>(&min_height_)) + sizeof(fade_dist_));
}

HeightmapGeom_Blend::~HeightmapGeom_Blend() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.HeightmapGeom.Blend)
  SharedDtor();
}

void HeightmapGeom_Blend::SharedDtor() {
}

void HeightmapGeom_Blend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeightmapGeom_Blend::descriptor() {
  ::protobuf_heightmapgeom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_heightmapgeom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeightmapGeom_Blend& HeightmapGeom_Blend::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_heightmapgeom_2eproto::scc_info_HeightmapGeom_Blend.base);
  return *internal_default_instance();
}


void HeightmapGeom_Blend::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.HeightmapGeom.Blend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&min_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fade_dist_) -
        reinterpret_cast<char*>(&min_height_)) + sizeof(fade_dist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeightmapGeom_Blend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.HeightmapGeom.Blend)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double min_height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_min_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double fade_dist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_fade_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fade_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.HeightmapGeom.Blend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.HeightmapGeom.Blend)
  return false;
#undef DO_
}

void HeightmapGeom_Blend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.HeightmapGeom.Blend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double min_height = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min_height(), output);
  }

  // required double fade_dist = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fade_dist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.HeightmapGeom.Blend)
}

::google::protobuf::uint8* HeightmapGeom_Blend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.HeightmapGeom.Blend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double min_height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min_height(), target);
  }

  // required double fade_dist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fade_dist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.HeightmapGeom.Blend)
  return target;
}

size_t HeightmapGeom_Blend::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.HeightmapGeom.Blend)
  size_t total_size = 0;

  if (has_min_height()) {
    // required double min_height = 1;
    total_size += 1 + 8;
  }

  if (has_fade_dist()) {
    // required double fade_dist = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t HeightmapGeom_Blend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.HeightmapGeom.Blend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double min_height = 1;
    total_size += 1 + 8;

    // required double fade_dist = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeightmapGeom_Blend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.HeightmapGeom.Blend)
  GOOGLE_DCHECK_NE(&from, this);
  const HeightmapGeom_Blend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeightmapGeom_Blend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.HeightmapGeom.Blend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.HeightmapGeom.Blend)
    MergeFrom(*source);
  }
}

void HeightmapGeom_Blend::MergeFrom(const HeightmapGeom_Blend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.HeightmapGeom.Blend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      min_height_ = from.min_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      fade_dist_ = from.fade_dist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeightmapGeom_Blend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.HeightmapGeom.Blend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapGeom_Blend::CopyFrom(const HeightmapGeom_Blend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.HeightmapGeom.Blend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapGeom_Blend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void HeightmapGeom_Blend::Swap(HeightmapGeom_Blend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeightmapGeom_Blend::InternalSwap(HeightmapGeom_Blend* other) {
  using std::swap;
  swap(min_height_, other->min_height_);
  swap(fade_dist_, other->fade_dist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeightmapGeom_Blend::GetMetadata() const {
  protobuf_heightmapgeom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_heightmapgeom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeightmapGeom::InitAsDefaultInstance() {
  ::gazebo::msgs::_HeightmapGeom_default_instance_._instance.get_mutable()->image_ = const_cast< ::gazebo::msgs::Image*>(
      ::gazebo::msgs::Image::internal_default_instance());
  ::gazebo::msgs::_HeightmapGeom_default_instance_._instance.get_mutable()->size_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::gazebo::msgs::_HeightmapGeom_default_instance_._instance.get_mutable()->origin_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
void HeightmapGeom::clear_image() {
  if (image_ != NULL) image_->Clear();
  clear_has_image();
}
void HeightmapGeom::clear_size() {
  if (size_ != NULL) size_->Clear();
  clear_has_size();
}
void HeightmapGeom::clear_origin() {
  if (origin_ != NULL) origin_->Clear();
  clear_has_origin();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeightmapGeom::kImageFieldNumber;
const int HeightmapGeom::kSizeFieldNumber;
const int HeightmapGeom::kOriginFieldNumber;
const int HeightmapGeom::kHeightsFieldNumber;
const int HeightmapGeom::kWidthFieldNumber;
const int HeightmapGeom::kHeightFieldNumber;
const int HeightmapGeom::kTextureFieldNumber;
const int HeightmapGeom::kBlendFieldNumber;
const int HeightmapGeom::kUseTerrainPagingFieldNumber;
const int HeightmapGeom::kFilenameFieldNumber;
const int HeightmapGeom::kSamplingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeightmapGeom::HeightmapGeom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_heightmapgeom_2eproto::scc_info_HeightmapGeom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.HeightmapGeom)
}
HeightmapGeom::HeightmapGeom(const HeightmapGeom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      heights_(from.heights_),
      texture_(from.texture_),
      blend_(from.blend_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_image()) {
    image_ = new ::gazebo::msgs::Image(*from.image_);
  } else {
    image_ = NULL;
  }
  if (from.has_size()) {
    size_ = new ::gazebo::msgs::Vector3d(*from.size_);
  } else {
    size_ = NULL;
  }
  if (from.has_origin()) {
    origin_ = new ::gazebo::msgs::Vector3d(*from.origin_);
  } else {
    origin_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&sampling_) -
    reinterpret_cast<char*>(&width_)) + sizeof(sampling_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.HeightmapGeom)
}

void HeightmapGeom::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sampling_) -
      reinterpret_cast<char*>(&image_)) + sizeof(sampling_));
}

HeightmapGeom::~HeightmapGeom() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.HeightmapGeom)
  SharedDtor();
}

void HeightmapGeom::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete origin_;
}

void HeightmapGeom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeightmapGeom::descriptor() {
  ::protobuf_heightmapgeom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_heightmapgeom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeightmapGeom& HeightmapGeom::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_heightmapgeom_2eproto::scc_info_HeightmapGeom.base);
  return *internal_default_instance();
}


void HeightmapGeom::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.HeightmapGeom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heights_.Clear();
  texture_.Clear();
  blend_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(image_ != NULL);
      image_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(size_ != NULL);
      size_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sampling_) -
        reinterpret_cast<char*>(&width_)) + sizeof(sampling_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeightmapGeom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.HeightmapGeom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gazebo.msgs.Image image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector3d size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Vector3d origin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float heights = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_heights())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_heights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gazebo.msgs.HeightmapGeom.Texture texture = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_texture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gazebo.msgs.HeightmapGeom.Blend blend = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_blend()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_terrain_paging = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_use_terrain_paging();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_terrain_paging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gazebo.msgs.HeightmapGeom.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sampling = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_sampling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sampling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.HeightmapGeom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.HeightmapGeom)
  return false;
#undef DO_
}

void HeightmapGeom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.HeightmapGeom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.Image image = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_image(), output);
  }

  // required .gazebo.msgs.Vector3d size = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_size(), output);
  }

  // optional .gazebo.msgs.Vector3d origin = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_origin(), output);
  }

  // repeated float heights = 4;
  for (int i = 0, n = this->heights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->heights(i), output);
  }

  // optional int32 width = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->width(), output);
  }

  // optional int32 height = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->height(), output);
  }

  // repeated .gazebo.msgs.HeightmapGeom.Texture texture = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->texture_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->texture(static_cast<int>(i)),
      output);
  }

  // repeated .gazebo.msgs.HeightmapGeom.Blend blend = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blend_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->blend(static_cast<int>(i)),
      output);
  }

  // optional bool use_terrain_paging = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->use_terrain_paging(), output);
  }

  // optional string filename = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.HeightmapGeom.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->filename(), output);
  }

  // optional uint32 sampling = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sampling(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.HeightmapGeom)
}

::google::protobuf::uint8* HeightmapGeom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.HeightmapGeom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.Image image = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_image(), deterministic, target);
  }

  // required .gazebo.msgs.Vector3d size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_size(), deterministic, target);
  }

  // optional .gazebo.msgs.Vector3d origin = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_origin(), deterministic, target);
  }

  // repeated float heights = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(4, this->heights_, target);

  // optional int32 width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->width(), target);
  }

  // optional int32 height = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->height(), target);
  }

  // repeated .gazebo.msgs.HeightmapGeom.Texture texture = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->texture_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->texture(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gazebo.msgs.HeightmapGeom.Blend blend = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blend_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->blend(static_cast<int>(i)), deterministic, target);
  }

  // optional bool use_terrain_paging = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->use_terrain_paging(), target);
  }

  // optional string filename = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.HeightmapGeom.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->filename(), target);
  }

  // optional uint32 sampling = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->sampling(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.HeightmapGeom)
  return target;
}

size_t HeightmapGeom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.HeightmapGeom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .gazebo.msgs.Vector3d size = 2;
  if (has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *size_);
  }
  // repeated float heights = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->heights_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->heights_size());
    total_size += data_size;
  }

  // repeated .gazebo.msgs.HeightmapGeom.Texture texture = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->texture_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->texture(static_cast<int>(i)));
    }
  }

  // repeated .gazebo.msgs.HeightmapGeom.Blend blend = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->blend_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->blend(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string filename = 10;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional .gazebo.msgs.Image image = 1;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *image_);
    }

  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional .gazebo.msgs.Vector3d origin = 3;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *origin_);
    }

    // optional int32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 6;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional bool use_terrain_paging = 9;
    if (has_use_terrain_paging()) {
      total_size += 1 + 1;
    }

    // optional uint32 sampling = 11;
    if (has_sampling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sampling());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeightmapGeom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.HeightmapGeom)
  GOOGLE_DCHECK_NE(&from, this);
  const HeightmapGeom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeightmapGeom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.HeightmapGeom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.HeightmapGeom)
    MergeFrom(*source);
  }
}

void HeightmapGeom::MergeFrom(const HeightmapGeom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.HeightmapGeom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heights_.MergeFrom(from.heights_);
  texture_.MergeFrom(from.texture_);
  blend_.MergeFrom(from.blend_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_image()->::gazebo::msgs::Image::MergeFrom(from.image());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_size()->::gazebo::msgs::Vector3d::MergeFrom(from.size());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_origin()->::gazebo::msgs::Vector3d::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      use_terrain_paging_ = from.use_terrain_paging_;
    }
    if (cached_has_bits & 0x00000080u) {
      sampling_ = from.sampling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeightmapGeom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.HeightmapGeom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapGeom::CopyFrom(const HeightmapGeom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.HeightmapGeom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapGeom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->texture())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->blend())) return false;
  if (has_image()) {
    if (!this->image_->IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size_->IsInitialized()) return false;
  }
  if (has_origin()) {
    if (!this->origin_->IsInitialized()) return false;
  }
  return true;
}

void HeightmapGeom::Swap(HeightmapGeom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeightmapGeom::InternalSwap(HeightmapGeom* other) {
  using std::swap;
  heights_.InternalSwap(&other->heights_);
  CastToBase(&texture_)->InternalSwap(CastToBase(&other->texture_));
  CastToBase(&blend_)->InternalSwap(CastToBase(&other->blend_));
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(image_, other->image_);
  swap(size_, other->size_);
  swap(origin_, other->origin_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(use_terrain_paging_, other->use_terrain_paging_);
  swap(sampling_, other->sampling_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeightmapGeom::GetMetadata() const {
  protobuf_heightmapgeom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_heightmapgeom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::HeightmapGeom_Texture* Arena::CreateMaybeMessage< ::gazebo::msgs::HeightmapGeom_Texture >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::HeightmapGeom_Texture >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::HeightmapGeom_Blend* Arena::CreateMaybeMessage< ::gazebo::msgs::HeightmapGeom_Blend >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::HeightmapGeom_Blend >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::HeightmapGeom* Arena::CreateMaybeMessage< ::gazebo::msgs::HeightmapGeom >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::HeightmapGeom >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
