// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inertial.proto

#ifndef PROTOBUF_INCLUDED_inertial_2eproto
#define PROTOBUF_INCLUDED_inertial_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pose.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_inertial_2eproto 

namespace protobuf_inertial_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_inertial_2eproto
namespace gazebo {
namespace msgs {
class Inertial;
class InertialDefaultTypeInternal;
extern InertialDefaultTypeInternal _Inertial_default_instance_;
}  // namespace msgs
}  // namespace gazebo
namespace google {
namespace protobuf {
template<> ::gazebo::msgs::Inertial* Arena::CreateMaybeMessage<::gazebo::msgs::Inertial>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gazebo {
namespace msgs {

// ===================================================================

class Inertial : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.Inertial) */ {
 public:
  Inertial();
  virtual ~Inertial();

  Inertial(const Inertial& from);

  inline Inertial& operator=(const Inertial& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inertial(Inertial&& from) noexcept
    : Inertial() {
    *this = ::std::move(from);
  }

  inline Inertial& operator=(Inertial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inertial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inertial* internal_default_instance() {
    return reinterpret_cast<const Inertial*>(
               &_Inertial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Inertial* other);
  friend void swap(Inertial& a, Inertial& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inertial* New() const final {
    return CreateMaybeMessage<Inertial>(NULL);
  }

  Inertial* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inertial>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inertial& from);
  void MergeFrom(const Inertial& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inertial* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gazebo.msgs.Pose pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  private:
  const ::gazebo::msgs::Pose& _internal_pose() const;
  public:
  const ::gazebo::msgs::Pose& pose() const;
  ::gazebo::msgs::Pose* release_pose();
  ::gazebo::msgs::Pose* mutable_pose();
  void set_allocated_pose(::gazebo::msgs::Pose* pose);

  // optional double mass = 1;
  bool has_mass() const;
  void clear_mass();
  static const int kMassFieldNumber = 1;
  double mass() const;
  void set_mass(double value);

  // optional double ixx = 3;
  bool has_ixx() const;
  void clear_ixx();
  static const int kIxxFieldNumber = 3;
  double ixx() const;
  void set_ixx(double value);

  // optional double ixy = 4;
  bool has_ixy() const;
  void clear_ixy();
  static const int kIxyFieldNumber = 4;
  double ixy() const;
  void set_ixy(double value);

  // optional double ixz = 5;
  bool has_ixz() const;
  void clear_ixz();
  static const int kIxzFieldNumber = 5;
  double ixz() const;
  void set_ixz(double value);

  // optional double iyy = 6;
  bool has_iyy() const;
  void clear_iyy();
  static const int kIyyFieldNumber = 6;
  double iyy() const;
  void set_iyy(double value);

  // optional double iyz = 7;
  bool has_iyz() const;
  void clear_iyz();
  static const int kIyzFieldNumber = 7;
  double iyz() const;
  void set_iyz(double value);

  // optional double izz = 8;
  bool has_izz() const;
  void clear_izz();
  static const int kIzzFieldNumber = 8;
  double izz() const;
  void set_izz(double value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Inertial)
 private:
  void set_has_mass();
  void clear_has_mass();
  void set_has_pose();
  void clear_has_pose();
  void set_has_ixx();
  void clear_has_ixx();
  void set_has_ixy();
  void clear_has_ixy();
  void set_has_ixz();
  void clear_has_ixz();
  void set_has_iyy();
  void clear_has_iyy();
  void set_has_iyz();
  void clear_has_iyz();
  void set_has_izz();
  void clear_has_izz();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::gazebo::msgs::Pose* pose_;
  double mass_;
  double ixx_;
  double ixy_;
  double ixz_;
  double iyy_;
  double iyz_;
  double izz_;
  friend struct ::protobuf_inertial_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Inertial

// optional double mass = 1;
inline bool Inertial::has_mass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inertial::set_has_mass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inertial::clear_has_mass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inertial::clear_mass() {
  mass_ = 0;
  clear_has_mass();
}
inline double Inertial::mass() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Inertial.mass)
  return mass_;
}
inline void Inertial::set_mass(double value) {
  set_has_mass();
  mass_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Inertial.mass)
}

// optional .gazebo.msgs.Pose pose = 2;
inline bool Inertial::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inertial::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inertial::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::gazebo::msgs::Pose& Inertial::_internal_pose() const {
  return *pose_;
}
inline const ::gazebo::msgs::Pose& Inertial::pose() const {
  const ::gazebo::msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:gazebo.msgs.Inertial.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Pose*>(
      &::gazebo::msgs::_Pose_default_instance_);
}
inline ::gazebo::msgs::Pose* Inertial::release_pose() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Inertial.pose)
  clear_has_pose();
  ::gazebo::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Pose* Inertial::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Inertial.pose)
  return pose_;
}
inline void Inertial::set_allocated_pose(::gazebo::msgs::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
  } else {
    clear_has_pose();
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Inertial.pose)
}

// optional double ixx = 3;
inline bool Inertial::has_ixx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inertial::set_has_ixx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inertial::clear_has_ixx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inertial::clear_ixx() {
  ixx_ = 0;
  clear_has_ixx();
}
inline double Inertial::ixx() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Inertial.ixx)
  return ixx_;
}
inline void Inertial::set_ixx(double value) {
  set_has_ixx();
  ixx_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Inertial.ixx)
}

// optional double ixy = 4;
inline bool Inertial::has_ixy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inertial::set_has_ixy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inertial::clear_has_ixy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inertial::clear_ixy() {
  ixy_ = 0;
  clear_has_ixy();
}
inline double Inertial::ixy() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Inertial.ixy)
  return ixy_;
}
inline void Inertial::set_ixy(double value) {
  set_has_ixy();
  ixy_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Inertial.ixy)
}

// optional double ixz = 5;
inline bool Inertial::has_ixz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inertial::set_has_ixz() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inertial::clear_has_ixz() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inertial::clear_ixz() {
  ixz_ = 0;
  clear_has_ixz();
}
inline double Inertial::ixz() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Inertial.ixz)
  return ixz_;
}
inline void Inertial::set_ixz(double value) {
  set_has_ixz();
  ixz_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Inertial.ixz)
}

// optional double iyy = 6;
inline bool Inertial::has_iyy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inertial::set_has_iyy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inertial::clear_has_iyy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inertial::clear_iyy() {
  iyy_ = 0;
  clear_has_iyy();
}
inline double Inertial::iyy() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Inertial.iyy)
  return iyy_;
}
inline void Inertial::set_iyy(double value) {
  set_has_iyy();
  iyy_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Inertial.iyy)
}

// optional double iyz = 7;
inline bool Inertial::has_iyz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inertial::set_has_iyz() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inertial::clear_has_iyz() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inertial::clear_iyz() {
  iyz_ = 0;
  clear_has_iyz();
}
inline double Inertial::iyz() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Inertial.iyz)
  return iyz_;
}
inline void Inertial::set_iyz(double value) {
  set_has_iyz();
  iyz_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Inertial.iyz)
}

// optional double izz = 8;
inline bool Inertial::has_izz() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inertial::set_has_izz() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inertial::clear_has_izz() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inertial::clear_izz() {
  izz_ = 0;
  clear_has_izz();
}
inline double Inertial::izz() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Inertial.izz)
  return izz_;
}
inline void Inertial::set_izz(double value) {
  set_has_izz();
  izz_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Inertial.izz)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_inertial_2eproto
