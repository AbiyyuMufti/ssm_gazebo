// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imu_sensor.proto

#include "imu_sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_imu_5fsensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_imu_5fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IMUSensor_AngularVelocity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_imu_5fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IMUSensor_LinearAcceleration;
}  // namespace protobuf_imu_5fsensor_2eproto
namespace protobuf_sensor_5fnoise_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensor_5fnoise_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SensorNoise;
}  // namespace protobuf_sensor_5fnoise_2eproto
namespace gazebo {
namespace msgs {
class IMUSensor_AngularVelocityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMUSensor_AngularVelocity>
      _instance;
} _IMUSensor_AngularVelocity_default_instance_;
class IMUSensor_LinearAccelerationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMUSensor_LinearAcceleration>
      _instance;
} _IMUSensor_LinearAcceleration_default_instance_;
class IMUSensorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMUSensor>
      _instance;
} _IMUSensor_default_instance_;
}  // namespace msgs
}  // namespace gazebo
namespace protobuf_imu_5fsensor_2eproto {
static void InitDefaultsIMUSensor_AngularVelocity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_IMUSensor_AngularVelocity_default_instance_;
    new (ptr) ::gazebo::msgs::IMUSensor_AngularVelocity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::IMUSensor_AngularVelocity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IMUSensor_AngularVelocity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIMUSensor_AngularVelocity}, {
      &protobuf_sensor_5fnoise_2eproto::scc_info_SensorNoise.base,}};

static void InitDefaultsIMUSensor_LinearAcceleration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_IMUSensor_LinearAcceleration_default_instance_;
    new (ptr) ::gazebo::msgs::IMUSensor_LinearAcceleration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::IMUSensor_LinearAcceleration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IMUSensor_LinearAcceleration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIMUSensor_LinearAcceleration}, {
      &protobuf_sensor_5fnoise_2eproto::scc_info_SensorNoise.base,}};

static void InitDefaultsIMUSensor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_IMUSensor_default_instance_;
    new (ptr) ::gazebo::msgs::IMUSensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::IMUSensor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_IMUSensor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsIMUSensor}, {
      &protobuf_imu_5fsensor_2eproto::scc_info_IMUSensor_AngularVelocity.base,
      &protobuf_imu_5fsensor_2eproto::scc_info_IMUSensor_LinearAcceleration.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_IMUSensor_AngularVelocity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IMUSensor_LinearAcceleration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IMUSensor.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::IMUSensor_AngularVelocity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::IMUSensor_AngularVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::IMUSensor_AngularVelocity, x_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::IMUSensor_AngularVelocity, y_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::IMUSensor_AngularVelocity, z_noise_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::IMUSensor_LinearAcceleration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::IMUSensor_LinearAcceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::IMUSensor_LinearAcceleration, x_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::IMUSensor_LinearAcceleration, y_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::IMUSensor_LinearAcceleration, z_noise_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::IMUSensor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::IMUSensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::IMUSensor, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::IMUSensor, linear_acceleration_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::gazebo::msgs::IMUSensor_AngularVelocity)},
  { 11, 19, sizeof(::gazebo::msgs::IMUSensor_LinearAcceleration)},
  { 22, 29, sizeof(::gazebo::msgs::IMUSensor)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_IMUSensor_AngularVelocity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_IMUSensor_LinearAcceleration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_IMUSensor_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "imu_sensor.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020imu_sensor.proto\022\013gazebo.msgs\032\022sensor_"
      "noise.proto\"\302\003\n\tIMUSensor\022@\n\020angular_vel"
      "ocity\030\001 \001(\0132&.gazebo.msgs.IMUSensor.Angu"
      "larVelocity\022F\n\023linear_acceleration\030\002 \001(\013"
      "2).gazebo.msgs.IMUSensor.LinearAccelerat"
      "ion\032\222\001\n\017AngularVelocity\022)\n\007x_noise\030\001 \001(\013"
      "2\030.gazebo.msgs.SensorNoise\022)\n\007y_noise\030\002 "
      "\001(\0132\030.gazebo.msgs.SensorNoise\022)\n\007z_noise"
      "\030\003 \001(\0132\030.gazebo.msgs.SensorNoise\032\225\001\n\022Lin"
      "earAcceleration\022)\n\007x_noise\030\001 \001(\0132\030.gazeb"
      "o.msgs.SensorNoise\022)\n\007y_noise\030\002 \001(\0132\030.ga"
      "zebo.msgs.SensorNoise\022)\n\007z_noise\030\003 \001(\0132\030"
      ".gazebo.msgs.SensorNoise"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "imu_sensor.proto", &protobuf_RegisterTypes);
  ::protobuf_sensor_5fnoise_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_imu_5fsensor_2eproto
namespace gazebo {
namespace msgs {

// ===================================================================

void IMUSensor_AngularVelocity::InitAsDefaultInstance() {
  ::gazebo::msgs::_IMUSensor_AngularVelocity_default_instance_._instance.get_mutable()->x_noise_ = const_cast< ::gazebo::msgs::SensorNoise*>(
      ::gazebo::msgs::SensorNoise::internal_default_instance());
  ::gazebo::msgs::_IMUSensor_AngularVelocity_default_instance_._instance.get_mutable()->y_noise_ = const_cast< ::gazebo::msgs::SensorNoise*>(
      ::gazebo::msgs::SensorNoise::internal_default_instance());
  ::gazebo::msgs::_IMUSensor_AngularVelocity_default_instance_._instance.get_mutable()->z_noise_ = const_cast< ::gazebo::msgs::SensorNoise*>(
      ::gazebo::msgs::SensorNoise::internal_default_instance());
}
void IMUSensor_AngularVelocity::clear_x_noise() {
  if (x_noise_ != NULL) x_noise_->Clear();
  clear_has_x_noise();
}
void IMUSensor_AngularVelocity::clear_y_noise() {
  if (y_noise_ != NULL) y_noise_->Clear();
  clear_has_y_noise();
}
void IMUSensor_AngularVelocity::clear_z_noise() {
  if (z_noise_ != NULL) z_noise_->Clear();
  clear_has_z_noise();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUSensor_AngularVelocity::kXNoiseFieldNumber;
const int IMUSensor_AngularVelocity::kYNoiseFieldNumber;
const int IMUSensor_AngularVelocity::kZNoiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUSensor_AngularVelocity::IMUSensor_AngularVelocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_imu_5fsensor_2eproto::scc_info_IMUSensor_AngularVelocity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.IMUSensor.AngularVelocity)
}
IMUSensor_AngularVelocity::IMUSensor_AngularVelocity(const IMUSensor_AngularVelocity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x_noise()) {
    x_noise_ = new ::gazebo::msgs::SensorNoise(*from.x_noise_);
  } else {
    x_noise_ = NULL;
  }
  if (from.has_y_noise()) {
    y_noise_ = new ::gazebo::msgs::SensorNoise(*from.y_noise_);
  } else {
    y_noise_ = NULL;
  }
  if (from.has_z_noise()) {
    z_noise_ = new ::gazebo::msgs::SensorNoise(*from.z_noise_);
  } else {
    z_noise_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.IMUSensor.AngularVelocity)
}

void IMUSensor_AngularVelocity::SharedCtor() {
  ::memset(&x_noise_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_noise_) -
      reinterpret_cast<char*>(&x_noise_)) + sizeof(z_noise_));
}

IMUSensor_AngularVelocity::~IMUSensor_AngularVelocity() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.IMUSensor.AngularVelocity)
  SharedDtor();
}

void IMUSensor_AngularVelocity::SharedDtor() {
  if (this != internal_default_instance()) delete x_noise_;
  if (this != internal_default_instance()) delete y_noise_;
  if (this != internal_default_instance()) delete z_noise_;
}

void IMUSensor_AngularVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IMUSensor_AngularVelocity::descriptor() {
  ::protobuf_imu_5fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imu_5fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMUSensor_AngularVelocity& IMUSensor_AngularVelocity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_imu_5fsensor_2eproto::scc_info_IMUSensor_AngularVelocity.base);
  return *internal_default_instance();
}


void IMUSensor_AngularVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.IMUSensor.AngularVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(x_noise_ != NULL);
      x_noise_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(y_noise_ != NULL);
      y_noise_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(z_noise_ != NULL);
      z_noise_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IMUSensor_AngularVelocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.IMUSensor.AngularVelocity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gazebo.msgs.SensorNoise x_noise = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_x_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.SensorNoise y_noise = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_y_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.SensorNoise z_noise = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_z_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.IMUSensor.AngularVelocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.IMUSensor.AngularVelocity)
  return false;
#undef DO_
}

void IMUSensor_AngularVelocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.IMUSensor.AngularVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.SensorNoise x_noise = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_x_noise(), output);
  }

  // optional .gazebo.msgs.SensorNoise y_noise = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_y_noise(), output);
  }

  // optional .gazebo.msgs.SensorNoise z_noise = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_z_noise(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.IMUSensor.AngularVelocity)
}

::google::protobuf::uint8* IMUSensor_AngularVelocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.IMUSensor.AngularVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.SensorNoise x_noise = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_x_noise(), deterministic, target);
  }

  // optional .gazebo.msgs.SensorNoise y_noise = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_y_noise(), deterministic, target);
  }

  // optional .gazebo.msgs.SensorNoise z_noise = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_z_noise(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.IMUSensor.AngularVelocity)
  return target;
}

size_t IMUSensor_AngularVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.IMUSensor.AngularVelocity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .gazebo.msgs.SensorNoise x_noise = 1;
    if (has_x_noise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *x_noise_);
    }

    // optional .gazebo.msgs.SensorNoise y_noise = 2;
    if (has_y_noise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *y_noise_);
    }

    // optional .gazebo.msgs.SensorNoise z_noise = 3;
    if (has_z_noise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *z_noise_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUSensor_AngularVelocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.IMUSensor.AngularVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUSensor_AngularVelocity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUSensor_AngularVelocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.IMUSensor.AngularVelocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.IMUSensor.AngularVelocity)
    MergeFrom(*source);
  }
}

void IMUSensor_AngularVelocity::MergeFrom(const IMUSensor_AngularVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.IMUSensor.AngularVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_x_noise()->::gazebo::msgs::SensorNoise::MergeFrom(from.x_noise());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_y_noise()->::gazebo::msgs::SensorNoise::MergeFrom(from.y_noise());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_z_noise()->::gazebo::msgs::SensorNoise::MergeFrom(from.z_noise());
    }
  }
}

void IMUSensor_AngularVelocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.IMUSensor.AngularVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUSensor_AngularVelocity::CopyFrom(const IMUSensor_AngularVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.IMUSensor.AngularVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUSensor_AngularVelocity::IsInitialized() const {
  if (has_x_noise()) {
    if (!this->x_noise_->IsInitialized()) return false;
  }
  if (has_y_noise()) {
    if (!this->y_noise_->IsInitialized()) return false;
  }
  if (has_z_noise()) {
    if (!this->z_noise_->IsInitialized()) return false;
  }
  return true;
}

void IMUSensor_AngularVelocity::Swap(IMUSensor_AngularVelocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUSensor_AngularVelocity::InternalSwap(IMUSensor_AngularVelocity* other) {
  using std::swap;
  swap(x_noise_, other->x_noise_);
  swap(y_noise_, other->y_noise_);
  swap(z_noise_, other->z_noise_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IMUSensor_AngularVelocity::GetMetadata() const {
  protobuf_imu_5fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imu_5fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMUSensor_LinearAcceleration::InitAsDefaultInstance() {
  ::gazebo::msgs::_IMUSensor_LinearAcceleration_default_instance_._instance.get_mutable()->x_noise_ = const_cast< ::gazebo::msgs::SensorNoise*>(
      ::gazebo::msgs::SensorNoise::internal_default_instance());
  ::gazebo::msgs::_IMUSensor_LinearAcceleration_default_instance_._instance.get_mutable()->y_noise_ = const_cast< ::gazebo::msgs::SensorNoise*>(
      ::gazebo::msgs::SensorNoise::internal_default_instance());
  ::gazebo::msgs::_IMUSensor_LinearAcceleration_default_instance_._instance.get_mutable()->z_noise_ = const_cast< ::gazebo::msgs::SensorNoise*>(
      ::gazebo::msgs::SensorNoise::internal_default_instance());
}
void IMUSensor_LinearAcceleration::clear_x_noise() {
  if (x_noise_ != NULL) x_noise_->Clear();
  clear_has_x_noise();
}
void IMUSensor_LinearAcceleration::clear_y_noise() {
  if (y_noise_ != NULL) y_noise_->Clear();
  clear_has_y_noise();
}
void IMUSensor_LinearAcceleration::clear_z_noise() {
  if (z_noise_ != NULL) z_noise_->Clear();
  clear_has_z_noise();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUSensor_LinearAcceleration::kXNoiseFieldNumber;
const int IMUSensor_LinearAcceleration::kYNoiseFieldNumber;
const int IMUSensor_LinearAcceleration::kZNoiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUSensor_LinearAcceleration::IMUSensor_LinearAcceleration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_imu_5fsensor_2eproto::scc_info_IMUSensor_LinearAcceleration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.IMUSensor.LinearAcceleration)
}
IMUSensor_LinearAcceleration::IMUSensor_LinearAcceleration(const IMUSensor_LinearAcceleration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x_noise()) {
    x_noise_ = new ::gazebo::msgs::SensorNoise(*from.x_noise_);
  } else {
    x_noise_ = NULL;
  }
  if (from.has_y_noise()) {
    y_noise_ = new ::gazebo::msgs::SensorNoise(*from.y_noise_);
  } else {
    y_noise_ = NULL;
  }
  if (from.has_z_noise()) {
    z_noise_ = new ::gazebo::msgs::SensorNoise(*from.z_noise_);
  } else {
    z_noise_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.IMUSensor.LinearAcceleration)
}

void IMUSensor_LinearAcceleration::SharedCtor() {
  ::memset(&x_noise_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_noise_) -
      reinterpret_cast<char*>(&x_noise_)) + sizeof(z_noise_));
}

IMUSensor_LinearAcceleration::~IMUSensor_LinearAcceleration() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.IMUSensor.LinearAcceleration)
  SharedDtor();
}

void IMUSensor_LinearAcceleration::SharedDtor() {
  if (this != internal_default_instance()) delete x_noise_;
  if (this != internal_default_instance()) delete y_noise_;
  if (this != internal_default_instance()) delete z_noise_;
}

void IMUSensor_LinearAcceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IMUSensor_LinearAcceleration::descriptor() {
  ::protobuf_imu_5fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imu_5fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMUSensor_LinearAcceleration& IMUSensor_LinearAcceleration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_imu_5fsensor_2eproto::scc_info_IMUSensor_LinearAcceleration.base);
  return *internal_default_instance();
}


void IMUSensor_LinearAcceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(x_noise_ != NULL);
      x_noise_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(y_noise_ != NULL);
      y_noise_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(z_noise_ != NULL);
      z_noise_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IMUSensor_LinearAcceleration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gazebo.msgs.SensorNoise x_noise = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_x_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.SensorNoise y_noise = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_y_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.SensorNoise z_noise = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_z_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.IMUSensor.LinearAcceleration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.IMUSensor.LinearAcceleration)
  return false;
#undef DO_
}

void IMUSensor_LinearAcceleration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.SensorNoise x_noise = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_x_noise(), output);
  }

  // optional .gazebo.msgs.SensorNoise y_noise = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_y_noise(), output);
  }

  // optional .gazebo.msgs.SensorNoise z_noise = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_z_noise(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.IMUSensor.LinearAcceleration)
}

::google::protobuf::uint8* IMUSensor_LinearAcceleration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.SensorNoise x_noise = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_x_noise(), deterministic, target);
  }

  // optional .gazebo.msgs.SensorNoise y_noise = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_y_noise(), deterministic, target);
  }

  // optional .gazebo.msgs.SensorNoise z_noise = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_z_noise(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.IMUSensor.LinearAcceleration)
  return target;
}

size_t IMUSensor_LinearAcceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .gazebo.msgs.SensorNoise x_noise = 1;
    if (has_x_noise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *x_noise_);
    }

    // optional .gazebo.msgs.SensorNoise y_noise = 2;
    if (has_y_noise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *y_noise_);
    }

    // optional .gazebo.msgs.SensorNoise z_noise = 3;
    if (has_z_noise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *z_noise_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUSensor_LinearAcceleration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUSensor_LinearAcceleration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUSensor_LinearAcceleration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.IMUSensor.LinearAcceleration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.IMUSensor.LinearAcceleration)
    MergeFrom(*source);
  }
}

void IMUSensor_LinearAcceleration::MergeFrom(const IMUSensor_LinearAcceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_x_noise()->::gazebo::msgs::SensorNoise::MergeFrom(from.x_noise());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_y_noise()->::gazebo::msgs::SensorNoise::MergeFrom(from.y_noise());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_z_noise()->::gazebo::msgs::SensorNoise::MergeFrom(from.z_noise());
    }
  }
}

void IMUSensor_LinearAcceleration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUSensor_LinearAcceleration::CopyFrom(const IMUSensor_LinearAcceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.IMUSensor.LinearAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUSensor_LinearAcceleration::IsInitialized() const {
  if (has_x_noise()) {
    if (!this->x_noise_->IsInitialized()) return false;
  }
  if (has_y_noise()) {
    if (!this->y_noise_->IsInitialized()) return false;
  }
  if (has_z_noise()) {
    if (!this->z_noise_->IsInitialized()) return false;
  }
  return true;
}

void IMUSensor_LinearAcceleration::Swap(IMUSensor_LinearAcceleration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUSensor_LinearAcceleration::InternalSwap(IMUSensor_LinearAcceleration* other) {
  using std::swap;
  swap(x_noise_, other->x_noise_);
  swap(y_noise_, other->y_noise_);
  swap(z_noise_, other->z_noise_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IMUSensor_LinearAcceleration::GetMetadata() const {
  protobuf_imu_5fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imu_5fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMUSensor::InitAsDefaultInstance() {
  ::gazebo::msgs::_IMUSensor_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::gazebo::msgs::IMUSensor_AngularVelocity*>(
      ::gazebo::msgs::IMUSensor_AngularVelocity::internal_default_instance());
  ::gazebo::msgs::_IMUSensor_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::gazebo::msgs::IMUSensor_LinearAcceleration*>(
      ::gazebo::msgs::IMUSensor_LinearAcceleration::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUSensor::kAngularVelocityFieldNumber;
const int IMUSensor::kLinearAccelerationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUSensor::IMUSensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_imu_5fsensor_2eproto::scc_info_IMUSensor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.IMUSensor)
}
IMUSensor::IMUSensor(const IMUSensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::gazebo::msgs::IMUSensor_AngularVelocity(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::gazebo::msgs::IMUSensor_LinearAcceleration(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.IMUSensor)
}

void IMUSensor::SharedCtor() {
  ::memset(&angular_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linear_acceleration_) -
      reinterpret_cast<char*>(&angular_velocity_)) + sizeof(linear_acceleration_));
}

IMUSensor::~IMUSensor() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.IMUSensor)
  SharedDtor();
}

void IMUSensor::SharedDtor() {
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_;
}

void IMUSensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IMUSensor::descriptor() {
  ::protobuf_imu_5fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imu_5fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMUSensor& IMUSensor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_imu_5fsensor_2eproto::scc_info_IMUSensor.base);
  return *internal_default_instance();
}


void IMUSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.IMUSensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(angular_velocity_ != NULL);
      angular_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(linear_acceleration_ != NULL);
      linear_acceleration_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IMUSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.IMUSensor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gazebo.msgs.IMUSensor.AngularVelocity angular_velocity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.IMUSensor.LinearAcceleration linear_acceleration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.IMUSensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.IMUSensor)
  return false;
#undef DO_
}

void IMUSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.IMUSensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.IMUSensor.AngularVelocity angular_velocity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_angular_velocity(), output);
  }

  // optional .gazebo.msgs.IMUSensor.LinearAcceleration linear_acceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_linear_acceleration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.IMUSensor)
}

::google::protobuf::uint8* IMUSensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.IMUSensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.IMUSensor.AngularVelocity angular_velocity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_angular_velocity(), deterministic, target);
  }

  // optional .gazebo.msgs.IMUSensor.LinearAcceleration linear_acceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_linear_acceleration(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.IMUSensor)
  return target;
}

size_t IMUSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.IMUSensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .gazebo.msgs.IMUSensor.AngularVelocity angular_velocity = 1;
    if (has_angular_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *angular_velocity_);
    }

    // optional .gazebo.msgs.IMUSensor.LinearAcceleration linear_acceleration = 2;
    if (has_linear_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_acceleration_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUSensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.IMUSensor)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUSensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUSensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.IMUSensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.IMUSensor)
    MergeFrom(*source);
  }
}

void IMUSensor::MergeFrom(const IMUSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.IMUSensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_angular_velocity()->::gazebo::msgs::IMUSensor_AngularVelocity::MergeFrom(from.angular_velocity());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_linear_acceleration()->::gazebo::msgs::IMUSensor_LinearAcceleration::MergeFrom(from.linear_acceleration());
    }
  }
}

void IMUSensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.IMUSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUSensor::CopyFrom(const IMUSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.IMUSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUSensor::IsInitialized() const {
  if (has_angular_velocity()) {
    if (!this->angular_velocity_->IsInitialized()) return false;
  }
  if (has_linear_acceleration()) {
    if (!this->linear_acceleration_->IsInitialized()) return false;
  }
  return true;
}

void IMUSensor::Swap(IMUSensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUSensor::InternalSwap(IMUSensor* other) {
  using std::swap;
  swap(angular_velocity_, other->angular_velocity_);
  swap(linear_acceleration_, other->linear_acceleration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IMUSensor::GetMetadata() const {
  protobuf_imu_5fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imu_5fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::IMUSensor_AngularVelocity* Arena::CreateMaybeMessage< ::gazebo::msgs::IMUSensor_AngularVelocity >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::IMUSensor_AngularVelocity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::IMUSensor_LinearAcceleration* Arena::CreateMaybeMessage< ::gazebo::msgs::IMUSensor_LinearAcceleration >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::IMUSensor_LinearAcceleration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::IMUSensor* Arena::CreateMaybeMessage< ::gazebo::msgs::IMUSensor >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::IMUSensor >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
