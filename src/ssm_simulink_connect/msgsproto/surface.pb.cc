// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: surface.proto

#include "surface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_friction_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_friction_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Friction;
}  // namespace protobuf_friction_2eproto
namespace gazebo {
namespace msgs {
class SurfaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Surface>
      _instance;
} _Surface_default_instance_;
}  // namespace msgs
}  // namespace gazebo
namespace protobuf_surface_2eproto {
static void InitDefaultsSurface() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Surface_default_instance_;
    new (ptr) ::gazebo::msgs::Surface();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Surface::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Surface =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSurface}, {
      &protobuf_friction_2eproto::scc_info_Friction.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Surface.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Surface, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Surface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Surface, friction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Surface, restitution_coefficient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Surface, bounce_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Surface, soft_cfm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Surface, soft_erp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Surface, kp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Surface, kd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Surface, max_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Surface, min_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Surface, collide_without_contact_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Surface, collide_without_contact_bitmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Surface, collide_bitmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Surface, elastic_modulus_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  12,
  11,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::gazebo::msgs::Surface)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_Surface_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "surface.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rsurface.proto\022\013gazebo.msgs\032\016friction.p"
      "roto\"\311\002\n\007Surface\022\'\n\010friction\030\001 \001(\0132\025.gaz"
      "ebo.msgs.Friction\022\037\n\027restitution_coeffic"
      "ient\030\002 \001(\001\022\030\n\020bounce_threshold\030\003 \001(\001\022\020\n\010"
      "soft_cfm\030\004 \001(\001\022\020\n\010soft_erp\030\005 \001(\001\022\n\n\002kp\030\006"
      " \001(\001\022\n\n\002kd\030\007 \001(\001\022\017\n\007max_vel\030\010 \001(\001\022\021\n\tmin"
      "_depth\030\t \001(\001\022\037\n\027collide_without_contact\030"
      "\n \001(\010\022\'\n\037collide_without_contact_bitmask"
      "\030\013 \001(\r\022\027\n\017collide_bitmask\030\014 \001(\r\022\027\n\017elast"
      "ic_modulus\030\r \001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 376);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "surface.proto", &protobuf_RegisterTypes);
  ::protobuf_friction_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_surface_2eproto
namespace gazebo {
namespace msgs {

// ===================================================================

void Surface::InitAsDefaultInstance() {
  ::gazebo::msgs::_Surface_default_instance_._instance.get_mutable()->friction_ = const_cast< ::gazebo::msgs::Friction*>(
      ::gazebo::msgs::Friction::internal_default_instance());
}
void Surface::clear_friction() {
  if (friction_ != NULL) friction_->Clear();
  clear_has_friction();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Surface::kFrictionFieldNumber;
const int Surface::kRestitutionCoefficientFieldNumber;
const int Surface::kBounceThresholdFieldNumber;
const int Surface::kSoftCfmFieldNumber;
const int Surface::kSoftErpFieldNumber;
const int Surface::kKpFieldNumber;
const int Surface::kKdFieldNumber;
const int Surface::kMaxVelFieldNumber;
const int Surface::kMinDepthFieldNumber;
const int Surface::kCollideWithoutContactFieldNumber;
const int Surface::kCollideWithoutContactBitmaskFieldNumber;
const int Surface::kCollideBitmaskFieldNumber;
const int Surface::kElasticModulusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Surface::Surface()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_surface_2eproto::scc_info_Surface.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Surface)
}
Surface::Surface(const Surface& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_friction()) {
    friction_ = new ::gazebo::msgs::Friction(*from.friction_);
  } else {
    friction_ = NULL;
  }
  ::memcpy(&restitution_coefficient_, &from.restitution_coefficient_,
    static_cast<size_t>(reinterpret_cast<char*>(&collide_bitmask_) -
    reinterpret_cast<char*>(&restitution_coefficient_)) + sizeof(collide_bitmask_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Surface)
}

void Surface::SharedCtor() {
  ::memset(&friction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collide_bitmask_) -
      reinterpret_cast<char*>(&friction_)) + sizeof(collide_bitmask_));
}

Surface::~Surface() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Surface)
  SharedDtor();
}

void Surface::SharedDtor() {
  if (this != internal_default_instance()) delete friction_;
}

void Surface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Surface::descriptor() {
  ::protobuf_surface_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_surface_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Surface& Surface::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_surface_2eproto::scc_info_Surface.base);
  return *internal_default_instance();
}


void Surface::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Surface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(friction_ != NULL);
    friction_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&restitution_coefficient_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_vel_) -
        reinterpret_cast<char*>(&restitution_coefficient_)) + sizeof(max_vel_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&min_depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&collide_bitmask_) -
        reinterpret_cast<char*>(&min_depth_)) + sizeof(collide_bitmask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Surface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Surface)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gazebo.msgs.Friction friction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_friction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double restitution_coefficient = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_restitution_coefficient();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &restitution_coefficient_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double bounce_threshold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_bounce_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bounce_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double soft_cfm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_soft_cfm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &soft_cfm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double soft_erp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_soft_erp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &soft_erp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_kp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kd = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_kd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_vel = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_max_vel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_depth = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_min_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool collide_without_contact = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_collide_without_contact();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collide_without_contact_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 collide_without_contact_bitmask = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_collide_without_contact_bitmask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collide_without_contact_bitmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 collide_bitmask = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_collide_bitmask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collide_bitmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double elastic_modulus = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_elastic_modulus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elastic_modulus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Surface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Surface)
  return false;
#undef DO_
}

void Surface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Surface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.Friction friction = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_friction(), output);
  }

  // optional double restitution_coefficient = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->restitution_coefficient(), output);
  }

  // optional double bounce_threshold = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bounce_threshold(), output);
  }

  // optional double soft_cfm = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->soft_cfm(), output);
  }

  // optional double soft_erp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->soft_erp(), output);
  }

  // optional double kp = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->kp(), output);
  }

  // optional double kd = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->kd(), output);
  }

  // optional double max_vel = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->max_vel(), output);
  }

  // optional double min_depth = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->min_depth(), output);
  }

  // optional bool collide_without_contact = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->collide_without_contact(), output);
  }

  // optional uint32 collide_without_contact_bitmask = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->collide_without_contact_bitmask(), output);
  }

  // optional uint32 collide_bitmask = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->collide_bitmask(), output);
  }

  // optional double elastic_modulus = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->elastic_modulus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Surface)
}

::google::protobuf::uint8* Surface::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Surface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.Friction friction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_friction(), deterministic, target);
  }

  // optional double restitution_coefficient = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->restitution_coefficient(), target);
  }

  // optional double bounce_threshold = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bounce_threshold(), target);
  }

  // optional double soft_cfm = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->soft_cfm(), target);
  }

  // optional double soft_erp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->soft_erp(), target);
  }

  // optional double kp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->kp(), target);
  }

  // optional double kd = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->kd(), target);
  }

  // optional double max_vel = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->max_vel(), target);
  }

  // optional double min_depth = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->min_depth(), target);
  }

  // optional bool collide_without_contact = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->collide_without_contact(), target);
  }

  // optional uint32 collide_without_contact_bitmask = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->collide_without_contact_bitmask(), target);
  }

  // optional uint32 collide_bitmask = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->collide_bitmask(), target);
  }

  // optional double elastic_modulus = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->elastic_modulus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Surface)
  return target;
}

size_t Surface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Surface)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .gazebo.msgs.Friction friction = 1;
    if (has_friction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *friction_);
    }

    // optional double restitution_coefficient = 2;
    if (has_restitution_coefficient()) {
      total_size += 1 + 8;
    }

    // optional double bounce_threshold = 3;
    if (has_bounce_threshold()) {
      total_size += 1 + 8;
    }

    // optional double soft_cfm = 4;
    if (has_soft_cfm()) {
      total_size += 1 + 8;
    }

    // optional double soft_erp = 5;
    if (has_soft_erp()) {
      total_size += 1 + 8;
    }

    // optional double kp = 6;
    if (has_kp()) {
      total_size += 1 + 8;
    }

    // optional double kd = 7;
    if (has_kd()) {
      total_size += 1 + 8;
    }

    // optional double max_vel = 8;
    if (has_max_vel()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional double min_depth = 9;
    if (has_min_depth()) {
      total_size += 1 + 8;
    }

    // optional bool collide_without_contact = 10;
    if (has_collide_without_contact()) {
      total_size += 1 + 1;
    }

    // optional uint32 collide_without_contact_bitmask = 11;
    if (has_collide_without_contact_bitmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collide_without_contact_bitmask());
    }

    // optional double elastic_modulus = 13;
    if (has_elastic_modulus()) {
      total_size += 1 + 8;
    }

    // optional uint32 collide_bitmask = 12;
    if (has_collide_bitmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collide_bitmask());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Surface::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Surface)
  GOOGLE_DCHECK_NE(&from, this);
  const Surface* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Surface>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Surface)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Surface)
    MergeFrom(*source);
  }
}

void Surface::MergeFrom(const Surface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Surface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_friction()->::gazebo::msgs::Friction::MergeFrom(from.friction());
    }
    if (cached_has_bits & 0x00000002u) {
      restitution_coefficient_ = from.restitution_coefficient_;
    }
    if (cached_has_bits & 0x00000004u) {
      bounce_threshold_ = from.bounce_threshold_;
    }
    if (cached_has_bits & 0x00000008u) {
      soft_cfm_ = from.soft_cfm_;
    }
    if (cached_has_bits & 0x00000010u) {
      soft_erp_ = from.soft_erp_;
    }
    if (cached_has_bits & 0x00000020u) {
      kp_ = from.kp_;
    }
    if (cached_has_bits & 0x00000040u) {
      kd_ = from.kd_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_vel_ = from.max_vel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      min_depth_ = from.min_depth_;
    }
    if (cached_has_bits & 0x00000200u) {
      collide_without_contact_ = from.collide_without_contact_;
    }
    if (cached_has_bits & 0x00000400u) {
      collide_without_contact_bitmask_ = from.collide_without_contact_bitmask_;
    }
    if (cached_has_bits & 0x00000800u) {
      elastic_modulus_ = from.elastic_modulus_;
    }
    if (cached_has_bits & 0x00001000u) {
      collide_bitmask_ = from.collide_bitmask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Surface::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Surface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Surface::CopyFrom(const Surface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Surface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Surface::IsInitialized() const {
  if (has_friction()) {
    if (!this->friction_->IsInitialized()) return false;
  }
  return true;
}

void Surface::Swap(Surface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Surface::InternalSwap(Surface* other) {
  using std::swap;
  swap(friction_, other->friction_);
  swap(restitution_coefficient_, other->restitution_coefficient_);
  swap(bounce_threshold_, other->bounce_threshold_);
  swap(soft_cfm_, other->soft_cfm_);
  swap(soft_erp_, other->soft_erp_);
  swap(kp_, other->kp_);
  swap(kd_, other->kd_);
  swap(max_vel_, other->max_vel_);
  swap(min_depth_, other->min_depth_);
  swap(collide_without_contact_, other->collide_without_contact_);
  swap(collide_without_contact_bitmask_, other->collide_without_contact_bitmask_);
  swap(elastic_modulus_, other->elastic_modulus_);
  swap(collide_bitmask_, other->collide_bitmask_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Surface::GetMetadata() const {
  protobuf_surface_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_surface_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::Surface* Arena::CreateMaybeMessage< ::gazebo::msgs::Surface >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Surface >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
