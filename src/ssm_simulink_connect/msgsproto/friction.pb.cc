// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friction.proto

#include "friction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_friction_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_friction_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Friction_Torsional_ODE;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_friction_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Friction_Torsional;
}  // namespace protobuf_friction_2eproto
namespace protobuf_vector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vector3d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3d;
}  // namespace protobuf_vector3d_2eproto
namespace gazebo {
namespace msgs {
class Friction_Torsional_ODEDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Friction_Torsional_ODE>
      _instance;
} _Friction_Torsional_ODE_default_instance_;
class Friction_TorsionalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Friction_Torsional>
      _instance;
} _Friction_Torsional_default_instance_;
class FrictionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Friction>
      _instance;
} _Friction_default_instance_;
}  // namespace msgs
}  // namespace gazebo
namespace protobuf_friction_2eproto {
static void InitDefaultsFriction_Torsional_ODE() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Friction_Torsional_ODE_default_instance_;
    new (ptr) ::gazebo::msgs::Friction_Torsional_ODE();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Friction_Torsional_ODE::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Friction_Torsional_ODE =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFriction_Torsional_ODE}, {}};

static void InitDefaultsFriction_Torsional() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Friction_Torsional_default_instance_;
    new (ptr) ::gazebo::msgs::Friction_Torsional();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Friction_Torsional::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Friction_Torsional =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFriction_Torsional}, {
      &protobuf_friction_2eproto::scc_info_Friction_Torsional_ODE.base,}};

static void InitDefaultsFriction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Friction_default_instance_;
    new (ptr) ::gazebo::msgs::Friction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Friction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Friction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFriction}, {
      &protobuf_vector3d_2eproto::scc_info_Vector3d.base,
      &protobuf_friction_2eproto::scc_info_Friction_Torsional.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Friction_Torsional_ODE.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Friction_Torsional.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Friction.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional_ODE, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional_ODE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional_ODE, slip_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional, coefficient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional, use_patch_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional, patch_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional, surface_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction_Torsional, ode_),
  1,
  4,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction, mu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction, mu2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction, fdir1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction, slip1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction, slip2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Friction, torsional_),
  2,
  3,
  0,
  4,
  5,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::gazebo::msgs::Friction_Torsional_ODE)},
  { 7, 17, sizeof(::gazebo::msgs::Friction_Torsional)},
  { 22, 33, sizeof(::gazebo::msgs::Friction)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_Friction_Torsional_ODE_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_Friction_Torsional_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_Friction_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "friction.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016friction.proto\022\013gazebo.msgs\032\016vector3d."
      "proto\"\315\002\n\010Friction\022\n\n\002mu\030\001 \001(\001\022\013\n\003mu2\030\002 "
      "\001(\001\022$\n\005fdir1\030\003 \001(\0132\025.gazebo.msgs.Vector3"
      "d\022\r\n\005slip1\030\004 \001(\001\022\r\n\005slip2\030\005 \001(\001\0222\n\ttorsi"
      "onal\030\006 \001(\0132\037.gazebo.msgs.Friction.Torsio"
      "nal\032\257\001\n\tTorsional\022\023\n\013coefficient\030\001 \001(\001\022\030"
      "\n\020use_patch_radius\030\002 \001(\010\022\024\n\014patch_radius"
      "\030\003 \001(\001\022\026\n\016surface_radius\030\004 \001(\001\0220\n\003ode\030\005 "
      "\001(\0132#.gazebo.msgs.Friction.Torsional.ODE"
      "\032\023\n\003ODE\022\014\n\004slip\030\001 \001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 381);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friction.proto", &protobuf_RegisterTypes);
  ::protobuf_vector3d_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_friction_2eproto
namespace gazebo {
namespace msgs {

// ===================================================================

void Friction_Torsional_ODE::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Friction_Torsional_ODE::kSlipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Friction_Torsional_ODE::Friction_Torsional_ODE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friction_2eproto::scc_info_Friction_Torsional_ODE.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Friction.Torsional.ODE)
}
Friction_Torsional_ODE::Friction_Torsional_ODE(const Friction_Torsional_ODE& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slip_ = from.slip_;
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Friction.Torsional.ODE)
}

void Friction_Torsional_ODE::SharedCtor() {
  slip_ = 0;
}

Friction_Torsional_ODE::~Friction_Torsional_ODE() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Friction.Torsional.ODE)
  SharedDtor();
}

void Friction_Torsional_ODE::SharedDtor() {
}

void Friction_Torsional_ODE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Friction_Torsional_ODE::descriptor() {
  ::protobuf_friction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Friction_Torsional_ODE& Friction_Torsional_ODE::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friction_2eproto::scc_info_Friction_Torsional_ODE.base);
  return *internal_default_instance();
}


void Friction_Torsional_ODE::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Friction.Torsional.ODE)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slip_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Friction_Torsional_ODE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Friction.Torsional.ODE)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double slip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_slip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Friction.Torsional.ODE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Friction.Torsional.ODE)
  return false;
#undef DO_
}

void Friction_Torsional_ODE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Friction.Torsional.ODE)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double slip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->slip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Friction.Torsional.ODE)
}

::google::protobuf::uint8* Friction_Torsional_ODE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Friction.Torsional.ODE)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double slip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->slip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Friction.Torsional.ODE)
  return target;
}

size_t Friction_Torsional_ODE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Friction.Torsional.ODE)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional double slip = 1;
  if (has_slip()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Friction_Torsional_ODE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Friction.Torsional.ODE)
  GOOGLE_DCHECK_NE(&from, this);
  const Friction_Torsional_ODE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Friction_Torsional_ODE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Friction.Torsional.ODE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Friction.Torsional.ODE)
    MergeFrom(*source);
  }
}

void Friction_Torsional_ODE::MergeFrom(const Friction_Torsional_ODE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Friction.Torsional.ODE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_slip()) {
    set_slip(from.slip());
  }
}

void Friction_Torsional_ODE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Friction.Torsional.ODE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friction_Torsional_ODE::CopyFrom(const Friction_Torsional_ODE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Friction.Torsional.ODE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friction_Torsional_ODE::IsInitialized() const {
  return true;
}

void Friction_Torsional_ODE::Swap(Friction_Torsional_ODE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Friction_Torsional_ODE::InternalSwap(Friction_Torsional_ODE* other) {
  using std::swap;
  swap(slip_, other->slip_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Friction_Torsional_ODE::GetMetadata() const {
  protobuf_friction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friction_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Friction_Torsional::InitAsDefaultInstance() {
  ::gazebo::msgs::_Friction_Torsional_default_instance_._instance.get_mutable()->ode_ = const_cast< ::gazebo::msgs::Friction_Torsional_ODE*>(
      ::gazebo::msgs::Friction_Torsional_ODE::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Friction_Torsional::kCoefficientFieldNumber;
const int Friction_Torsional::kUsePatchRadiusFieldNumber;
const int Friction_Torsional::kPatchRadiusFieldNumber;
const int Friction_Torsional::kSurfaceRadiusFieldNumber;
const int Friction_Torsional::kOdeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Friction_Torsional::Friction_Torsional()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friction_2eproto::scc_info_Friction_Torsional.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Friction.Torsional)
}
Friction_Torsional::Friction_Torsional(const Friction_Torsional& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ode()) {
    ode_ = new ::gazebo::msgs::Friction_Torsional_ODE(*from.ode_);
  } else {
    ode_ = NULL;
  }
  ::memcpy(&coefficient_, &from.coefficient_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_patch_radius_) -
    reinterpret_cast<char*>(&coefficient_)) + sizeof(use_patch_radius_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Friction.Torsional)
}

void Friction_Torsional::SharedCtor() {
  ::memset(&ode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_patch_radius_) -
      reinterpret_cast<char*>(&ode_)) + sizeof(use_patch_radius_));
}

Friction_Torsional::~Friction_Torsional() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Friction.Torsional)
  SharedDtor();
}

void Friction_Torsional::SharedDtor() {
  if (this != internal_default_instance()) delete ode_;
}

void Friction_Torsional::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Friction_Torsional::descriptor() {
  ::protobuf_friction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Friction_Torsional& Friction_Torsional::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friction_2eproto::scc_info_Friction_Torsional.base);
  return *internal_default_instance();
}


void Friction_Torsional::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Friction.Torsional)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ode_ != NULL);
    ode_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&coefficient_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_patch_radius_) -
        reinterpret_cast<char*>(&coefficient_)) + sizeof(use_patch_radius_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Friction_Torsional::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Friction.Torsional)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double coefficient = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_coefficient();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &coefficient_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_patch_radius = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_use_patch_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_patch_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double patch_radius = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_patch_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &patch_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double surface_radius = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_surface_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Friction.Torsional)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Friction.Torsional)
  return false;
#undef DO_
}

void Friction_Torsional::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Friction.Torsional)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double coefficient = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->coefficient(), output);
  }

  // optional bool use_patch_radius = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_patch_radius(), output);
  }

  // optional double patch_radius = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->patch_radius(), output);
  }

  // optional double surface_radius = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->surface_radius(), output);
  }

  // optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_ode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Friction.Torsional)
}

::google::protobuf::uint8* Friction_Torsional::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Friction.Torsional)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double coefficient = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->coefficient(), target);
  }

  // optional bool use_patch_radius = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_patch_radius(), target);
  }

  // optional double patch_radius = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->patch_radius(), target);
  }

  // optional double surface_radius = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->surface_radius(), target);
  }

  // optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_ode(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Friction.Torsional)
  return target;
}

size_t Friction_Torsional::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Friction.Torsional)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;
    if (has_ode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ode_);
    }

    // optional double coefficient = 1;
    if (has_coefficient()) {
      total_size += 1 + 8;
    }

    // optional double patch_radius = 3;
    if (has_patch_radius()) {
      total_size += 1 + 8;
    }

    // optional double surface_radius = 4;
    if (has_surface_radius()) {
      total_size += 1 + 8;
    }

    // optional bool use_patch_radius = 2;
    if (has_use_patch_radius()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Friction_Torsional::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Friction.Torsional)
  GOOGLE_DCHECK_NE(&from, this);
  const Friction_Torsional* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Friction_Torsional>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Friction.Torsional)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Friction.Torsional)
    MergeFrom(*source);
  }
}

void Friction_Torsional::MergeFrom(const Friction_Torsional& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Friction.Torsional)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ode()->::gazebo::msgs::Friction_Torsional_ODE::MergeFrom(from.ode());
    }
    if (cached_has_bits & 0x00000002u) {
      coefficient_ = from.coefficient_;
    }
    if (cached_has_bits & 0x00000004u) {
      patch_radius_ = from.patch_radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      surface_radius_ = from.surface_radius_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_patch_radius_ = from.use_patch_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Friction_Torsional::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Friction.Torsional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friction_Torsional::CopyFrom(const Friction_Torsional& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Friction.Torsional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friction_Torsional::IsInitialized() const {
  return true;
}

void Friction_Torsional::Swap(Friction_Torsional* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Friction_Torsional::InternalSwap(Friction_Torsional* other) {
  using std::swap;
  swap(ode_, other->ode_);
  swap(coefficient_, other->coefficient_);
  swap(patch_radius_, other->patch_radius_);
  swap(surface_radius_, other->surface_radius_);
  swap(use_patch_radius_, other->use_patch_radius_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Friction_Torsional::GetMetadata() const {
  protobuf_friction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friction_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Friction::InitAsDefaultInstance() {
  ::gazebo::msgs::_Friction_default_instance_._instance.get_mutable()->fdir1_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::gazebo::msgs::_Friction_default_instance_._instance.get_mutable()->torsional_ = const_cast< ::gazebo::msgs::Friction_Torsional*>(
      ::gazebo::msgs::Friction_Torsional::internal_default_instance());
}
void Friction::clear_fdir1() {
  if (fdir1_ != NULL) fdir1_->Clear();
  clear_has_fdir1();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Friction::kMuFieldNumber;
const int Friction::kMu2FieldNumber;
const int Friction::kFdir1FieldNumber;
const int Friction::kSlip1FieldNumber;
const int Friction::kSlip2FieldNumber;
const int Friction::kTorsionalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Friction::Friction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_friction_2eproto::scc_info_Friction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Friction)
}
Friction::Friction(const Friction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fdir1()) {
    fdir1_ = new ::gazebo::msgs::Vector3d(*from.fdir1_);
  } else {
    fdir1_ = NULL;
  }
  if (from.has_torsional()) {
    torsional_ = new ::gazebo::msgs::Friction_Torsional(*from.torsional_);
  } else {
    torsional_ = NULL;
  }
  ::memcpy(&mu_, &from.mu_,
    static_cast<size_t>(reinterpret_cast<char*>(&slip2_) -
    reinterpret_cast<char*>(&mu_)) + sizeof(slip2_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Friction)
}

void Friction::SharedCtor() {
  ::memset(&fdir1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slip2_) -
      reinterpret_cast<char*>(&fdir1_)) + sizeof(slip2_));
}

Friction::~Friction() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Friction)
  SharedDtor();
}

void Friction::SharedDtor() {
  if (this != internal_default_instance()) delete fdir1_;
  if (this != internal_default_instance()) delete torsional_;
}

void Friction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Friction::descriptor() {
  ::protobuf_friction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Friction& Friction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_friction_2eproto::scc_info_Friction.base);
  return *internal_default_instance();
}


void Friction::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Friction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fdir1_ != NULL);
      fdir1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(torsional_ != NULL);
      torsional_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&mu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slip2_) -
        reinterpret_cast<char*>(&mu_)) + sizeof(slip2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Friction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Friction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double mu = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_mu();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mu2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_mu2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mu2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Vector3d fdir1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fdir1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double slip1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_slip1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slip1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double slip2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_slip2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slip2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Friction.Torsional torsional = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_torsional()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Friction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Friction)
  return false;
#undef DO_
}

void Friction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Friction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double mu = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mu(), output);
  }

  // optional double mu2 = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->mu2(), output);
  }

  // optional .gazebo.msgs.Vector3d fdir1 = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_fdir1(), output);
  }

  // optional double slip1 = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->slip1(), output);
  }

  // optional double slip2 = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->slip2(), output);
  }

  // optional .gazebo.msgs.Friction.Torsional torsional = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_torsional(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Friction)
}

::google::protobuf::uint8* Friction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Friction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double mu = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mu(), target);
  }

  // optional double mu2 = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->mu2(), target);
  }

  // optional .gazebo.msgs.Vector3d fdir1 = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_fdir1(), deterministic, target);
  }

  // optional double slip1 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->slip1(), target);
  }

  // optional double slip2 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->slip2(), target);
  }

  // optional .gazebo.msgs.Friction.Torsional torsional = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_torsional(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Friction)
  return target;
}

size_t Friction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Friction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .gazebo.msgs.Vector3d fdir1 = 3;
    if (has_fdir1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fdir1_);
    }

    // optional .gazebo.msgs.Friction.Torsional torsional = 6;
    if (has_torsional()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *torsional_);
    }

    // optional double mu = 1;
    if (has_mu()) {
      total_size += 1 + 8;
    }

    // optional double mu2 = 2;
    if (has_mu2()) {
      total_size += 1 + 8;
    }

    // optional double slip1 = 4;
    if (has_slip1()) {
      total_size += 1 + 8;
    }

    // optional double slip2 = 5;
    if (has_slip2()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Friction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Friction)
  GOOGLE_DCHECK_NE(&from, this);
  const Friction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Friction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Friction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Friction)
    MergeFrom(*source);
  }
}

void Friction::MergeFrom(const Friction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Friction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fdir1()->::gazebo::msgs::Vector3d::MergeFrom(from.fdir1());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_torsional()->::gazebo::msgs::Friction_Torsional::MergeFrom(from.torsional());
    }
    if (cached_has_bits & 0x00000004u) {
      mu_ = from.mu_;
    }
    if (cached_has_bits & 0x00000008u) {
      mu2_ = from.mu2_;
    }
    if (cached_has_bits & 0x00000010u) {
      slip1_ = from.slip1_;
    }
    if (cached_has_bits & 0x00000020u) {
      slip2_ = from.slip2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Friction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Friction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friction::CopyFrom(const Friction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Friction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friction::IsInitialized() const {
  if (has_fdir1()) {
    if (!this->fdir1_->IsInitialized()) return false;
  }
  return true;
}

void Friction::Swap(Friction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Friction::InternalSwap(Friction* other) {
  using std::swap;
  swap(fdir1_, other->fdir1_);
  swap(torsional_, other->torsional_);
  swap(mu_, other->mu_);
  swap(mu2_, other->mu2_);
  swap(slip1_, other->slip1_);
  swap(slip2_, other->slip2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Friction::GetMetadata() const {
  protobuf_friction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_friction_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::Friction_Torsional_ODE* Arena::CreateMaybeMessage< ::gazebo::msgs::Friction_Torsional_ODE >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Friction_Torsional_ODE >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::Friction_Torsional* Arena::CreateMaybeMessage< ::gazebo::msgs::Friction_Torsional >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Friction_Torsional >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::Friction* Arena::CreateMaybeMessage< ::gazebo::msgs::Friction >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Friction >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
