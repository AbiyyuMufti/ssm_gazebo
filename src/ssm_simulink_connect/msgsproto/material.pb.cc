// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: material.proto

#include "material.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_color_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_color_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Color;
}  // namespace protobuf_color_2eproto
namespace protobuf_material_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_material_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Material_Script;
}  // namespace protobuf_material_2eproto
namespace gazebo {
namespace msgs {
class Material_ScriptDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Material_Script>
      _instance;
} _Material_Script_default_instance_;
class MaterialDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Material>
      _instance;
} _Material_default_instance_;
}  // namespace msgs
}  // namespace gazebo
namespace protobuf_material_2eproto {
static void InitDefaultsMaterial_Script() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Material_Script_default_instance_;
    new (ptr) ::gazebo::msgs::Material_Script();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Material_Script::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Material_Script =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMaterial_Script}, {}};

static void InitDefaultsMaterial() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_Material_default_instance_;
    new (ptr) ::gazebo::msgs::Material();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::Material::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Material =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMaterial}, {
      &protobuf_material_2eproto::scc_info_Material_Script.base,
      &protobuf_color_2eproto::scc_info_Color.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Material_Script.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Material.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Material_Script, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Material_Script, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Material_Script, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Material_Script, name_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Material, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Material, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Material, script_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Material, shader_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Material, normal_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Material, ambient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Material, diffuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Material, specular_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Material, emissive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::Material, lighting_),
  1,
  7,
  0,
  2,
  3,
  4,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::gazebo::msgs::Material_Script)},
  { 9, 22, sizeof(::gazebo::msgs::Material)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_Material_Script_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_Material_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "material.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016material.proto\022\013gazebo.msgs\032\013color.pro"
      "to\"\260\003\n\010Material\022,\n\006script\030\001 \001(\0132\034.gazebo"
      ".msgs.Material.Script\0225\n\013shader_type\030\002 \001"
      "(\0162 .gazebo.msgs.Material.ShaderType\022\022\n\n"
      "normal_map\030\003 \001(\t\022#\n\007ambient\030\004 \001(\0132\022.gaze"
      "bo.msgs.Color\022#\n\007diffuse\030\005 \001(\0132\022.gazebo."
      "msgs.Color\022$\n\010specular\030\006 \001(\0132\022.gazebo.ms"
      "gs.Color\022$\n\010emissive\030\007 \001(\0132\022.gazebo.msgs"
      ".Color\022\020\n\010lighting\030\010 \001(\010\032#\n\006Script\022\013\n\003ur"
      "i\030\001 \003(\t\022\014\n\004name\030\002 \002(\t\"^\n\nShaderType\022\n\n\006V"
      "ERTEX\020\001\022\t\n\005PIXEL\020\002\022\033\n\027NORMAL_MAP_OBJECT_"
      "SPACE\020\003\022\034\n\030NORMAL_MAP_TANGENT_SPACE\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 477);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "material.proto", &protobuf_RegisterTypes);
  ::protobuf_color_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_material_2eproto
namespace gazebo {
namespace msgs {
const ::google::protobuf::EnumDescriptor* Material_ShaderType_descriptor() {
  protobuf_material_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_material_2eproto::file_level_enum_descriptors[0];
}
bool Material_ShaderType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Material_ShaderType Material::VERTEX;
const Material_ShaderType Material::PIXEL;
const Material_ShaderType Material::NORMAL_MAP_OBJECT_SPACE;
const Material_ShaderType Material::NORMAL_MAP_TANGENT_SPACE;
const Material_ShaderType Material::ShaderType_MIN;
const Material_ShaderType Material::ShaderType_MAX;
const int Material::ShaderType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Material_Script::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Material_Script::kUriFieldNumber;
const int Material_Script::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Material_Script::Material_Script()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_material_2eproto::scc_info_Material_Script.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Material.Script)
}
Material_Script::Material_Script(const Material_Script& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      uri_(from.uri_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Material.Script)
}

void Material_Script::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Material_Script::~Material_Script() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Material.Script)
  SharedDtor();
}

void Material_Script::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Material_Script::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Material_Script::descriptor() {
  ::protobuf_material_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_material_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Material_Script& Material_Script::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_material_2eproto::scc_info_Material_Script.base);
  return *internal_default_instance();
}


void Material_Script::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Material.Script)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Material_Script::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Material.Script)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri(this->uri_size() - 1).data(),
            static_cast<int>(this->uri(this->uri_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gazebo.msgs.Material.Script.uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gazebo.msgs.Material.Script.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Material.Script)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Material.Script)
  return false;
#undef DO_
}

void Material_Script::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Material.Script)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string uri = 1;
  for (int i = 0, n = this->uri_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri(i).data(), static_cast<int>(this->uri(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Material.Script.uri");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uri(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Material.Script.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Material.Script)
}

::google::protobuf::uint8* Material_Script::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Material.Script)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string uri = 1;
  for (int i = 0, n = this->uri_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri(i).data(), static_cast<int>(this->uri(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Material.Script.uri");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->uri(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Material.Script.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Material.Script)
  return target;
}

size_t Material_Script::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Material.Script)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 2;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated string uri = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->uri_size());
  for (int i = 0, n = this->uri_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->uri(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Material_Script::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Material.Script)
  GOOGLE_DCHECK_NE(&from, this);
  const Material_Script* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Material_Script>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Material.Script)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Material.Script)
    MergeFrom(*source);
  }
}

void Material_Script::MergeFrom(const Material_Script& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Material.Script)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uri_.MergeFrom(from.uri_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Material_Script::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Material.Script)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material_Script::CopyFrom(const Material_Script& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Material.Script)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material_Script::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Material_Script::Swap(Material_Script* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Material_Script::InternalSwap(Material_Script* other) {
  using std::swap;
  uri_.InternalSwap(CastToBase(&other->uri_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Material_Script::GetMetadata() const {
  protobuf_material_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_material_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Material::InitAsDefaultInstance() {
  ::gazebo::msgs::_Material_default_instance_._instance.get_mutable()->script_ = const_cast< ::gazebo::msgs::Material_Script*>(
      ::gazebo::msgs::Material_Script::internal_default_instance());
  ::gazebo::msgs::_Material_default_instance_._instance.get_mutable()->ambient_ = const_cast< ::gazebo::msgs::Color*>(
      ::gazebo::msgs::Color::internal_default_instance());
  ::gazebo::msgs::_Material_default_instance_._instance.get_mutable()->diffuse_ = const_cast< ::gazebo::msgs::Color*>(
      ::gazebo::msgs::Color::internal_default_instance());
  ::gazebo::msgs::_Material_default_instance_._instance.get_mutable()->specular_ = const_cast< ::gazebo::msgs::Color*>(
      ::gazebo::msgs::Color::internal_default_instance());
  ::gazebo::msgs::_Material_default_instance_._instance.get_mutable()->emissive_ = const_cast< ::gazebo::msgs::Color*>(
      ::gazebo::msgs::Color::internal_default_instance());
}
void Material::clear_ambient() {
  if (ambient_ != NULL) ambient_->Clear();
  clear_has_ambient();
}
void Material::clear_diffuse() {
  if (diffuse_ != NULL) diffuse_->Clear();
  clear_has_diffuse();
}
void Material::clear_specular() {
  if (specular_ != NULL) specular_->Clear();
  clear_has_specular();
}
void Material::clear_emissive() {
  if (emissive_ != NULL) emissive_->Clear();
  clear_has_emissive();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Material::kScriptFieldNumber;
const int Material::kShaderTypeFieldNumber;
const int Material::kNormalMapFieldNumber;
const int Material::kAmbientFieldNumber;
const int Material::kDiffuseFieldNumber;
const int Material::kSpecularFieldNumber;
const int Material::kEmissiveFieldNumber;
const int Material::kLightingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Material::Material()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_material_2eproto::scc_info_Material.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Material)
}
Material::Material(const Material& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  normal_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_normal_map()) {
    normal_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_map_);
  }
  if (from.has_script()) {
    script_ = new ::gazebo::msgs::Material_Script(*from.script_);
  } else {
    script_ = NULL;
  }
  if (from.has_ambient()) {
    ambient_ = new ::gazebo::msgs::Color(*from.ambient_);
  } else {
    ambient_ = NULL;
  }
  if (from.has_diffuse()) {
    diffuse_ = new ::gazebo::msgs::Color(*from.diffuse_);
  } else {
    diffuse_ = NULL;
  }
  if (from.has_specular()) {
    specular_ = new ::gazebo::msgs::Color(*from.specular_);
  } else {
    specular_ = NULL;
  }
  if (from.has_emissive()) {
    emissive_ = new ::gazebo::msgs::Color(*from.emissive_);
  } else {
    emissive_ = NULL;
  }
  ::memcpy(&lighting_, &from.lighting_,
    static_cast<size_t>(reinterpret_cast<char*>(&shader_type_) -
    reinterpret_cast<char*>(&lighting_)) + sizeof(shader_type_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Material)
}

void Material::SharedCtor() {
  normal_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&script_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lighting_) -
      reinterpret_cast<char*>(&script_)) + sizeof(lighting_));
  shader_type_ = 1;
}

Material::~Material() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Material)
  SharedDtor();
}

void Material::SharedDtor() {
  normal_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete script_;
  if (this != internal_default_instance()) delete ambient_;
  if (this != internal_default_instance()) delete diffuse_;
  if (this != internal_default_instance()) delete specular_;
  if (this != internal_default_instance()) delete emissive_;
}

void Material::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Material::descriptor() {
  ::protobuf_material_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_material_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Material& Material::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_material_2eproto::scc_info_Material.base);
  return *internal_default_instance();
}


void Material::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.Material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      normal_map_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(script_ != NULL);
      script_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ambient_ != NULL);
      ambient_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(diffuse_ != NULL);
      diffuse_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(specular_ != NULL);
      specular_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(emissive_ != NULL);
      emissive_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    lighting_ = false;
    shader_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Material)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gazebo.msgs.Material.Script script = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_script()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Material.ShaderType shader_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gazebo::msgs::Material_ShaderType_IsValid(value)) {
            set_shader_type(static_cast< ::gazebo::msgs::Material_ShaderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string normal_map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normal_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->normal_map().data(), static_cast<int>(this->normal_map().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gazebo.msgs.Material.normal_map");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Color ambient = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ambient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Color diffuse = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_diffuse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Color specular = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_specular()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gazebo.msgs.Color emissive = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_emissive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lighting = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_lighting();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lighting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Material)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Material)
  return false;
#undef DO_
}

void Material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.Material.Script script = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_script(), output);
  }

  // optional .gazebo.msgs.Material.ShaderType shader_type = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->shader_type(), output);
  }

  // optional string normal_map = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normal_map().data(), static_cast<int>(this->normal_map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Material.normal_map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->normal_map(), output);
  }

  // optional .gazebo.msgs.Color ambient = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_ambient(), output);
  }

  // optional .gazebo.msgs.Color diffuse = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_diffuse(), output);
  }

  // optional .gazebo.msgs.Color specular = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_specular(), output);
  }

  // optional .gazebo.msgs.Color emissive = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_emissive(), output);
  }

  // optional bool lighting = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->lighting(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Material)
}

::google::protobuf::uint8* Material::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.Material.Script script = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_script(), deterministic, target);
  }

  // optional .gazebo.msgs.Material.ShaderType shader_type = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->shader_type(), target);
  }

  // optional string normal_map = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normal_map().data(), static_cast<int>(this->normal_map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gazebo.msgs.Material.normal_map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->normal_map(), target);
  }

  // optional .gazebo.msgs.Color ambient = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_ambient(), deterministic, target);
  }

  // optional .gazebo.msgs.Color diffuse = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_diffuse(), deterministic, target);
  }

  // optional .gazebo.msgs.Color specular = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_specular(), deterministic, target);
  }

  // optional .gazebo.msgs.Color emissive = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_emissive(), deterministic, target);
  }

  // optional bool lighting = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->lighting(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Material)
  return target;
}

size_t Material::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.Material)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string normal_map = 3;
    if (has_normal_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normal_map());
    }

    // optional .gazebo.msgs.Material.Script script = 1;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *script_);
    }

    // optional .gazebo.msgs.Color ambient = 4;
    if (has_ambient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ambient_);
    }

    // optional .gazebo.msgs.Color diffuse = 5;
    if (has_diffuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *diffuse_);
    }

    // optional .gazebo.msgs.Color specular = 6;
    if (has_specular()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *specular_);
    }

    // optional .gazebo.msgs.Color emissive = 7;
    if (has_emissive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *emissive_);
    }

    // optional bool lighting = 8;
    if (has_lighting()) {
      total_size += 1 + 1;
    }

    // optional .gazebo.msgs.Material.ShaderType shader_type = 2;
    if (has_shader_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shader_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Material::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.Material)
  GOOGLE_DCHECK_NE(&from, this);
  const Material* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Material>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.Material)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.Material)
    MergeFrom(*source);
  }
}

void Material::MergeFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.Material)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_normal_map();
      normal_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_map_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_script()->::gazebo::msgs::Material_Script::MergeFrom(from.script());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ambient()->::gazebo::msgs::Color::MergeFrom(from.ambient());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_diffuse()->::gazebo::msgs::Color::MergeFrom(from.diffuse());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_specular()->::gazebo::msgs::Color::MergeFrom(from.specular());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_emissive()->::gazebo::msgs::Color::MergeFrom(from.emissive());
    }
    if (cached_has_bits & 0x00000040u) {
      lighting_ = from.lighting_;
    }
    if (cached_has_bits & 0x00000080u) {
      shader_type_ = from.shader_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Material::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material::CopyFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {
  if (has_script()) {
    if (!this->script_->IsInitialized()) return false;
  }
  if (has_ambient()) {
    if (!this->ambient_->IsInitialized()) return false;
  }
  if (has_diffuse()) {
    if (!this->diffuse_->IsInitialized()) return false;
  }
  if (has_specular()) {
    if (!this->specular_->IsInitialized()) return false;
  }
  if (has_emissive()) {
    if (!this->emissive_->IsInitialized()) return false;
  }
  return true;
}

void Material::Swap(Material* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Material::InternalSwap(Material* other) {
  using std::swap;
  normal_map_.Swap(&other->normal_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(script_, other->script_);
  swap(ambient_, other->ambient_);
  swap(diffuse_, other->diffuse_);
  swap(specular_, other->specular_);
  swap(emissive_, other->emissive_);
  swap(lighting_, other->lighting_);
  swap(shader_type_, other->shader_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Material::GetMetadata() const {
  protobuf_material_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_material_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::Material_Script* Arena::CreateMaybeMessage< ::gazebo::msgs::Material_Script >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Material_Script >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::Material* Arena::CreateMaybeMessage< ::gazebo::msgs::Material >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::Material >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
