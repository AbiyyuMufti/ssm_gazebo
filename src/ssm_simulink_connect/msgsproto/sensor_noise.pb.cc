// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_noise.proto

#include "sensor_noise.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {
class SensorNoiseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorNoise>
      _instance;
} _SensorNoise_default_instance_;
}  // namespace msgs
}  // namespace gazebo
namespace protobuf_sensor_5fnoise_2eproto {
static void InitDefaultsSensorNoise() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_SensorNoise_default_instance_;
    new (ptr) ::gazebo::msgs::SensorNoise();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::SensorNoise::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SensorNoise =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSensorNoise}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SensorNoise.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::SensorNoise, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::SensorNoise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::SensorNoise, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::SensorNoise, mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::SensorNoise, stddev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::SensorNoise, bias_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::SensorNoise, bias_stddev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::SensorNoise, precision_),
  5,
  0,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::gazebo::msgs::SensorNoise)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_SensorNoise_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sensor_noise.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022sensor_noise.proto\022\013gazebo.msgs\"\313\001\n\013Se"
      "nsorNoise\022+\n\004type\030\001 \002(\0162\035.gazebo.msgs.Se"
      "nsorNoise.Type\022\014\n\004mean\030\002 \001(\001\022\016\n\006stddev\030\003"
      " \001(\001\022\021\n\tbias_mean\030\004 \001(\001\022\023\n\013bias_stddev\030\005"
      " \001(\001\022\021\n\tprecision\030\006 \001(\001\"6\n\004Type\022\010\n\004NONE\020"
      "\001\022\014\n\010GAUSSIAN\020\002\022\026\n\022GAUSSIAN_QUANTIZED\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensor_noise.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensor_5fnoise_2eproto
namespace gazebo {
namespace msgs {
const ::google::protobuf::EnumDescriptor* SensorNoise_Type_descriptor() {
  protobuf_sensor_5fnoise_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_5fnoise_2eproto::file_level_enum_descriptors[0];
}
bool SensorNoise_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SensorNoise_Type SensorNoise::NONE;
const SensorNoise_Type SensorNoise::GAUSSIAN;
const SensorNoise_Type SensorNoise::GAUSSIAN_QUANTIZED;
const SensorNoise_Type SensorNoise::Type_MIN;
const SensorNoise_Type SensorNoise::Type_MAX;
const int SensorNoise::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SensorNoise::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorNoise::kTypeFieldNumber;
const int SensorNoise::kMeanFieldNumber;
const int SensorNoise::kStddevFieldNumber;
const int SensorNoise::kBiasMeanFieldNumber;
const int SensorNoise::kBiasStddevFieldNumber;
const int SensorNoise::kPrecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorNoise::SensorNoise()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensor_5fnoise_2eproto::scc_info_SensorNoise.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.SensorNoise)
}
SensorNoise::SensorNoise(const SensorNoise& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mean_, &from.mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&mean_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.SensorNoise)
}

void SensorNoise::SharedCtor() {
  ::memset(&mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&precision_) -
      reinterpret_cast<char*>(&mean_)) + sizeof(precision_));
  type_ = 1;
}

SensorNoise::~SensorNoise() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.SensorNoise)
  SharedDtor();
}

void SensorNoise::SharedDtor() {
}

void SensorNoise::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorNoise::descriptor() {
  ::protobuf_sensor_5fnoise_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fnoise_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorNoise& SensorNoise::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensor_5fnoise_2eproto::scc_info_SensorNoise.base);
  return *internal_default_instance();
}


void SensorNoise::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.SensorNoise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&mean_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&precision_) -
        reinterpret_cast<char*>(&mean_)) + sizeof(precision_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SensorNoise::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.SensorNoise)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.SensorNoise.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gazebo::msgs::SensorNoise_Type_IsValid(value)) {
            set_type(static_cast< ::gazebo::msgs::SensorNoise_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mean = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stddev = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_stddev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double bias_mean = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_bias_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bias_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double bias_stddev = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_bias_stddev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bias_stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double precision = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.SensorNoise)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.SensorNoise)
  return false;
#undef DO_
}

void SensorNoise::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.SensorNoise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.SensorNoise.Type type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional double mean = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->mean(), output);
  }

  // optional double stddev = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->stddev(), output);
  }

  // optional double bias_mean = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bias_mean(), output);
  }

  // optional double bias_stddev = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->bias_stddev(), output);
  }

  // optional double precision = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->precision(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.SensorNoise)
}

::google::protobuf::uint8* SensorNoise::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.SensorNoise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.SensorNoise.Type type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional double mean = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->mean(), target);
  }

  // optional double stddev = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->stddev(), target);
  }

  // optional double bias_mean = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bias_mean(), target);
  }

  // optional double bias_stddev = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->bias_stddev(), target);
  }

  // optional double precision = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->precision(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.SensorNoise)
  return target;
}

size_t SensorNoise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.SensorNoise)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .gazebo.msgs.SensorNoise.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double mean = 2;
    if (has_mean()) {
      total_size += 1 + 8;
    }

    // optional double stddev = 3;
    if (has_stddev()) {
      total_size += 1 + 8;
    }

    // optional double bias_mean = 4;
    if (has_bias_mean()) {
      total_size += 1 + 8;
    }

    // optional double bias_stddev = 5;
    if (has_bias_stddev()) {
      total_size += 1 + 8;
    }

    // optional double precision = 6;
    if (has_precision()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorNoise::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.SensorNoise)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorNoise* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorNoise>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.SensorNoise)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.SensorNoise)
    MergeFrom(*source);
  }
}

void SensorNoise::MergeFrom(const SensorNoise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.SensorNoise)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mean_ = from.mean_;
    }
    if (cached_has_bits & 0x00000002u) {
      stddev_ = from.stddev_;
    }
    if (cached_has_bits & 0x00000004u) {
      bias_mean_ = from.bias_mean_;
    }
    if (cached_has_bits & 0x00000008u) {
      bias_stddev_ = from.bias_stddev_;
    }
    if (cached_has_bits & 0x00000010u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorNoise::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.SensorNoise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorNoise::CopyFrom(const SensorNoise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.SensorNoise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorNoise::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  return true;
}

void SensorNoise::Swap(SensorNoise* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorNoise::InternalSwap(SensorNoise* other) {
  using std::swap;
  swap(mean_, other->mean_);
  swap(stddev_, other->stddev_);
  swap(bias_mean_, other->bias_mean_);
  swap(bias_stddev_, other->bias_stddev_);
  swap(precision_, other->precision_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorNoise::GetMetadata() const {
  protobuf_sensor_5fnoise_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fnoise_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::SensorNoise* Arena::CreateMaybeMessage< ::gazebo::msgs::SensorNoise >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::SensorNoise >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
